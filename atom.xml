<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晓风博客</title>
  <subtitle>分享、关注互联网</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liyaodong.com/"/>
  <updated>2017-01-03T11:34:52.000Z</updated>
  <id>http://liyaodong.com/</id>
  
  <author>
    <name>Vanilla</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>响应式图片解决方案</title>
    <link href="http://liyaodong.com/2015/10/18/responsive-image-workflow/"/>
    <id>http://liyaodong.com/2015/10/18/responsive-image-workflow/</id>
    <published>2015-10-18T06:26:06.000Z</published>
    <updated>2017-01-03T11:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://liyaodong.qiniudn.com/uploads/2015/1018/car.jpg" alt="响应式图片"><br>如今开发一个网站不是响应式都不好意思拿出来，那么作为响应式中的重要一环「响应式图片」你又是如何解决的呢？</p>
<a id="more"></a>
<p><a href="http://httparchive.org/interesting.php?a=All&amp;l=Oct%201%202015" target="_blank" rel="external">网站的平均加载已经到了近 2MB</a> 并在不断地增加中，其中图片占据了绝大多数流量(63%)。可以肯定的是网页已经有了严重的大小问题，而图片就是罪魁祸首。虽然已经有很多种 <a href="http://csswizardry.com/2013/01/front-end-performance-for-web-designers-and-front-end-developers/" target="_blank" rel="external">措施</a> 可以减少网页加载量，但或许更重要的步骤之一是确保响应式图片的加载方案。通过利用响应式图片解决方案，我们可以确保最佳的图片被加载，<a href="http://blog.cloudfour.com/css-media-query-for-mobile-is-fools-gold/" target="_blank" rel="external">带宽不会被过大的图片所浪费</a>。因此 <a href="https://html.spec.whatwg.org/multipage/embedded-content.html#embedded-content" target="_blank" rel="external">W3C 定义了 picture 标签</a>：基于检测客户端设备类型的可替换图片方案。具体是由 <code>picture</code> 这个标签去实现，也就是说我们现在有了一个基于标准的响应式图片解决方案可以用在实践中。</p>
<h3 id="长话短说（人话）"><a href="#长话短说（人话）" class="headerlink" title="长话短说（人话）"></a>长话短说（人话）</h3><ul>
<li>断点（breakpoints）应该 <a href="http://bradfrost.com/blog/post/7-habits-of-highly-effective-media-queries/#content" target="_blank" rel="external">取决于内容</a> 而不是设备宽度 （CSS3 media query）</li>
<li>根据尺寸加载不同图片</li>
<li>计算图片像素密度并加到图片加载列表中</li>
<li>通过消除图片加载列表中太相近的值来让加载列表变得可维护</li>
<li>利用程序自动输出图片的不同大小</li>
<li>利用 <code>img</code> 标签的 <code>srcset</code> <code>sizes</code> 等属性输出同一张图片的不同路径/尺寸，以解决响应式图片的大小和像素密度的问题</li>
<li><a href="http://scottjehl.github.io/picturefill/" target="_blank" rel="external">Picturefill</a> 库能让我们现在就使用这些强大的特性</li>
<li>虽然 <a href="https://www.filamentgroup.com/lab/to-picturefill.html" target="_blank" rel="external">Picturefill 还有一些缺点</a> 但这么做仍然利大于弊</li>
</ul>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>第一步就是定义所有响应式图片的尺寸和断点，这些信息在网页原型中就应该被精确的标示出来。重要的一点是 <a href="http://bradfrost.com/blog/post/7-habits-of-highly-effective-media-queries/#content" target="_blank" rel="external">你的断点应该取决于你的内容</a> 而不是不同设备的宽度。这么做是因为设备的参数是在不断变化的，流行的设备尺寸总是在变。通过让内容来决定断点位置，这将确保我们的界面在所有屏幕上响应而不是特殊的几个设备。</p>
<blockquote>
<p><strong>注意</strong> 当决定哪些图片应该被做成响应式时，要记住一点，大多数都是放在内容中的图片。例如在 <code>HTML</code> 中插入的图片而不是在 <code>CSS</code> 中的背景图片。</p>
</blockquote>
<h4 id="图片尺寸"><a href="#图片尺寸" class="headerlink" title="图片尺寸"></a>图片尺寸</h4><p>首先将你的浏览器窗口放到最大（或者你规定的内容展示最大宽度），然后记录下此时你的内容宽度和你想要展示的图片宽度，通过浏览器的开发者工具或者类似的插件。</p>
<p>接下来缩放你的浏览器窗口直到你想要给图片设置宽度的下一个断点，再继续缩放直到你记录下所有的作用于图片宽度断点。当你完成的时候你应该记录下每张图片在不同大小下应该载入的宽度。</p>
<p>举例，仅仅是例子：</p>
<ul>
<li>[max-width] : [1440]</li>
<li>[breakpoint large] : [1120]</li>
<li>[breakpoint medium] : [800]</li>
<li>[reakpoint small] : [400]</li>
</ul>
<blockquote>
<p><strong>注意</strong> 关于决定断点需要注意的是：断点越多，代码越难维护。除此之外大量的断点会使 CSS 变得臃肿。所以尽量在保证效果的情况下保持最少的断点。</p>
</blockquote>
<h4 id="高分辨率"><a href="#高分辨率" class="headerlink" title="高分辨率"></a>高分辨率</h4><p>下一步是根据你想要支持的分辨率 <a href="http://www.html5rocks.com/en/mobile/high-dpi/" target="_blank" rel="external">对图片宽度进行计算</a>。决定要支持那些分辨率是很困难的，因为有 <a href="http://screensiz.es/phone" target="_blank" rel="external">太多的不同的分辨率</a>，并且每支持一种分辨率你需要计算宽度并放在你的图片加载列表里。所以需要做的是根据实际情况和你的用户群体去选择支持不同的分辨率。</p>
<p>如果你已经决定了需要支持那些高分辨率，那图片加载列表会像下面这样：</p>
<ul>
<li>[max-width] : [image width], [image width x1.5], [image width x2]</li>
<li>[breakpoint large] : [image width], [image width x1.5], [image width x2]</li>
<li>[breakpoint medium] : [image width], [image width x1.5], [image width x2]</li>
<li>[breakpoint small] : [image width], [image width x1.5], [image width x2]</li>
</ul>
<h4 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h4><p>如你所见，我们的图片列表数量会随着支持不同的分辨率和断点而变长。通过改变整合列表项让列表更清晰可控是很有必要的。例如任何相近或者不超过 200 像素差距的值。将几个相近的值整合为一个值将有助于构建更清晰的列表：</p>
<ul>
<li>(min-width:1280px) : 1040px, <del>1560px</del>, 2080px</li>
<li>(min-width:1120px) : <del>924px</del>, 1386px, 1848px</li>
<li>(min-width:800px) : 800px, <del>1200px</del>, 1600px</li>
<li>(min-width:400px) : 400px, 600px, <del>800px</del></li>
</ul>
<blockquote>
<p><strong>注意</strong> 这里用像素来做断点值只是为了好对应图片宽度，实际上你的 <a href="http://bradfrost.com/blog/post/7-habits-of-highly-effective-media-queries/#relative" target="_blank" rel="external">断点应该使用相对单位</a>（em/rem not px）</p>
</blockquote>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>现在我们有了一个慎重考虑的图片宽度列表，下一步则要将每个图片导出为以「断点名」+「<a href="http://sebastien-gabriel.com/designers-guide-to-dpi/#multiplier" target="_blank" rel="external">像素密度倍数</a>」为名的文件。例如我将最大的断点称为 “large” 并且图片像素密度倍数为两倍，那么我的文件名则为 ‘image_large@2x.jpg’。我倾向于在 Photoshop 中保存图片为 70% 压缩，因为 70% 压缩能确保达到最优的图片大小并且不会损失过多的清晰度（这取决于不同图片，目的是在保证清晰度的情况下尽量减小文件大小）。如果你倾向于保存为 JPEG 格式，那确保通过勾选 <a href="http://calendar.perfplanet.com/2012/progressive-jpegs-a-new-best-practice/" target="_blank" rel="external">progressive(渐进)</a> 来让图片从模糊到清晰的加载效果。</p>
<blockquote>
<p><strong>译者注</strong> PS/AI 中保存图片请使用「存储为 web 格式/save for web」，快捷键 ctrl/command + shift + alt + s。PNG 格式请勾选 交错/interlaced，JPEG 格式请勾选 渐进/progressive。</p>
</blockquote>
<h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><p>通过提前写好动作脚本（宏）可以让你批量自动化导出你想要的图片大小。根据你选择的设计软件，自动化的脚本可以很容易的设置使用。不幸的是你仍然需要手动重命名每张图片为 ‘xxx_large@2x.png’ 这样的命名格式。如果你使用 Photoshop 这里有一个 <a href="http://www.creativebloq.com/adobe/create-own-photoshop-actions-61411918" target="_blank" rel="external">指南</a> 可以帮助你编写你自己的脚本批处理。或者你也可以用这个 <a href="https://github.com/bjango/Bjango-Actions" target="_blank" rel="external">写好的 PS 脚本</a>。</p>
<h4 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h4><p>另外一个自动化导出图片的方法是使用构建工具，我选择使用 <a href="http://gulpjs.com/" target="_blank" rel="external">Gulp</a>。Gulp 是一个基于 Javascript 流式思想的构建工具，这使得构建复杂任务的编写更加简单。这里有各种任务插件，包括<a href="https://www.npmjs.com/package/gulp-image-resize" target="_blank" rel="external">调整图片大小</a>、<a href="https://www.npmjs.com/package/gulp-rename" target="_blank" rel="external">文件重命名</a>。只需要编写小段配置，你就可以完全自动化工作流中的某些部分，并且在使用的时候你无须再考虑。使用构建工具的另一个好处是你可以将你的任务链式的串联起来并且可调整顺序。</p>
<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>最后，你需要注意的是在将你的图片放进网页前进行优化。这将确保图片数据多余的数据被删除，将有效的减小文件的大小。和处理图片或缩放图片一样，有很多种方法可以完成这个任务：你可以使用软件或者终端命令手动优化图片，或者你也可以使用构建工具自动完成这项任务。我喜欢的 JPGs 图片压缩软件是 <a href="https://imageoptim.com/" target="_blank" rel="external">imageOptim</a> PNG 是 <a href="http://pngmini.com/" target="_blank" rel="external">imageAlpha</a>，还有一大堆软件你可以选择。</p>
<p>另外你也可以使用强大的构建工具，好处你不需要记得压缩图片，你只需要在你的每个项目里区配置工具即可。我选择用 Gulp 的插件 (imagemin)[<a href="https://www.npmjs.com/package/gulp-imagemin" target="_blank" rel="external">https://www.npmjs.com/package/gulp-imagemin</a>] 来做这件事情，它也能压缩 SVG 和 GIF 文件。</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>最终的步骤是在网页中实现响应式图片。这种方法即所谓的 <a href="https://usecases.responsiveimages.org/#resolution-based-selection" target="_blank" rel="external">分辨率切换</a>，因为我们只是切换了同一张图片在不同尺寸和分辨率下的源文件地址，以达到在不同的尺寸和像素密度下达到响应的目的。所以我们会使用 picture 标准的一部分 <a href="https://html.spec.whatwg.org/multipage/embedded-content.html#attr-picture-source-srcset" target="_blank" rel="external">srcset</a> 和 <a href="https://html.spec.whatwg.org/multipage/embedded-content.html#attr-picture-source-sizes" target="_blank" rel="external">sizes</a> 属性。这些属性继承了 <code>&lt;img&gt;</code> <code>&lt;source&gt;</code> 标签，提供了一个可供浏览器选择最佳图片的图片地址列表。我们实际上提供给浏览器的是我们所知道的信息，而具体会加载那个源则是未知的。这取决于用户设备的带宽、像素密度等。</p>
<h4 id="srcset-属性"><a href="#srcset-属性" class="headerlink" title="srcset 属性"></a>srcset 属性</h4><p>让我们从 <code>srcset</code> 属性开始，首先我们会提供一个 <code>src</code> 属性给那些不支持 <code>srcset</code> 属性的浏览器。中等大小和分辨率就足够了（不支持 srcset 属性的浏览器用户电脑的尺寸和分辨率也不会大）。接下来通过 <code>srcset</code> 指定给 <code>&lt;img&gt;</code> 标签所有图片源的信息。然后使用逗号分隔列出一个从小到大的图片源列表。每个图片源后可以跟<code>w</code>描述符或者<code>x</code>描述符。最后的结果看起来像是这样：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image_medium.jpg"</span> </span></div><div class="line"><span class="attr">srcset</span>=<span class="string">"image_small.jpg 400w, image_small@1.5x.jpg 600w, image_medium.jpg 800w, image_xlarge.jpg 1040w, image_large@1.5x.jpg 1386w, image_medium@2x.jpg 1600w, image_large@2x.jpg 1848w, image_xlarge@2x.jpg 2080w"</span> </div><div class="line"><span class="attr">alt</span>=<span class="string">"Image description"</span> /&gt;</div></pre></td></tr></table></figure>
<p>现在我们有了一个可供选择源的图片标签，浏览器可以根据选择采用最佳的源，同时我们还有一个回退方案填写在 <code>src</code> 属性中。如果浏览器支持 <code>srcset</code> 则会下载最佳的图像，否则直接下载 <code>src</code> 属性内的图像。因此带宽浪费和页面大小冗余会被降到最低。</p>
<p>需要注意的是 <strong><code>srcset</code> 只是描述了一个 <code>&lt;img&gt;</code> 有哪些可用的源</strong>，后面的 <code>w</code> 描述符并不是说某个宽度下就一定会加载这个源。<strong>具体的情况还是取决于用户的浏览器环境、带宽等</strong> 同时对于同一源，只能标示一个符号<code>w/x</code>，不能同时标记两者，也建议不要在列表中混用 <code>w/x</code>，混用将会导致计算过于复杂。</p>
<h4 id="sizes-属性"><a href="#sizes-属性" class="headerlink" title="sizes 属性"></a>sizes 属性</h4><p>我们也可以通过设置 <code>sizes</code> 属性来<strong>帮助浏览器选择不同的图片源</strong>，通过 <code>size</code> 属性浏览器知道我们的图片在不同的 viewport 下占了多大，也就是<strong>图片相对于 viewport 的比例</strong>。<code>sizes</code> 属性并不是必填的，没有<code>sizes</code> 属性 <code>srcset</code> 仍然有效。但是如果 <code>srcset</code> 属性没有那么 <code>sizes</code> 属性将不会生效。</p>
<p>如果没有 <code>sizes</code> 属性，那么 <code>srcset</code> 则被认为不论图片占多宽，都始终采用和 viewport 相同宽度的源（排除分辨率的影响）。建议 <code>sizes</code> 应该配合 <code>srcset</code> 一起使用：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image_medium.jpg"</span> </span></div><div class="line"><span class="attr">sizes</span> =<span class="string">"(min-width:1120px) 924px, (min-width:1280px) 1040px, 100vw"</span> </div><div class="line"><span class="attr">srcset</span>=<span class="string">"image_small.jpg 400w, image_small@1.5x.jpg 600w, image_medium.jpg 800w, image_xlarge.jpg 1040w, image_large@1.5x.jpg 1386w, image_medium@2x.jpg 1600w, image_large@2x.jpg 1848w, image_xlarge@2x.jpg 2080w"</span></div><div class="line"><span class="attr">alt</span>=<span class="string">"Image description"</span> /&gt;</div></pre></td></tr></table></figure>
<p>上面的代码告诉浏览器，在视窗宽度小于 1120px 的时候这个图片要加载 924px 宽度的，在视窗宽度小于 1280px 大于 1120px 的时候要加载 1040px 的图片，视窗大于 1280px 的加载和视窗宽度相同的图片。</p>
<p>浏览器将使用这些属性来进一步为用户选择合适的图片源，你可以选择增加更多的断点和不同宽度下图片的加载列表（但这会显著的增加布局内的信息），或者你也可以保持相对简单。关键是现在浏览器知道了关于图片的更多信息，它将在不同的情况下选择最佳的图片源。</p>
<h4 id="艺术指导（ART-DIRECTION-USE-CASE）"><a href="#艺术指导（ART-DIRECTION-USE-CASE）" class="headerlink" title="艺术指导（ART-DIRECTION USE CASE）"></a>艺术指导（ART-DIRECTION USE CASE）</h4><p>大多数情况下 <code>srcset</code> 和 <code>sizes</code> 都已经够用了。但是仍然有时候你需要根据不同的尺寸修改图片的内容。例如使用类似于 <code>srcset</code> 和 <code>sizes</code> 标准的 <code>&lt;picture&gt;</code> 标签。关于 <code>&lt;picture&gt;</code> 的更多信息可以了解 <a href="http://blog.cloudfour.com/dont-use-picture-most-of-the-time/" target="_blank" rel="external">Jason Grigsby’s article</a> （这篇文章其实说的大多数情况下不要用 picture，个人认为其实不同的图片内容也可依赖 <code>srcset</code>，<code>picture</code> 过于复杂。并且兼容性上 <a href="http://caniuse.com/#search=picture" target="_blank" rel="external"><code>picture</code></a> 不如 <a href="http://caniuse.com/#search=srcset" target="_blank" rel="external"><code>srcset</code></a> ）。</p>
<h4 id="浏览器兼容"><a href="#浏览器兼容" class="headerlink" title="浏览器兼容"></a>浏览器兼容</h4><p><a href="http://caniuse.com/#feat=srcset" target="_blank" rel="external"><code>srcset</code> 和 <code>sizes</code>的浏览器兼容性</a> 已经获得了更多的支持，但对于大多数项目你需要更多的考虑兼容。幸运的是 <a href="http://scottjehl.github.io/picturefill/" target="_blank" rel="external">Picturefill</a> 是一个很棒的支持跨浏览器的兼容库，它支持 <code>&lt;picture&gt;</code> 和 <code>srcset</code> 以及 <code>sizes</code> 特性。这个兼容库允许你使用推荐的 <code>&lt;picture&gt;</code> 语法，因此可以在浏览器兼容性没有问题的时候移除该库。虽然 Picturefill 还有一些缺点，但这么做仍然利大于弊。</p>
<blockquote>
<p><strong>注意</strong> 在使用 picturefill 库的时候，作者推荐抛弃使用 <code>src</code> 标签，因为这将 <a href="https://www.filamentgroup.com/lab/to-picturefill.html" target="_blank" rel="external">导致图片的重复下载</a>。</p>
</blockquote>
<p>中文资料：</p>
<ul>
<li><a href="https://www.zfanw.com/blog/srcset-and-sizes.html" target="_blank" rel="external">Srcset 和 sizes（推荐）</a></li>
<li><a href="http://www.zhangxinxu.com/wordpress/2014/10/responsive-images-srcset-size-w-descriptor/" target="_blank" rel="external">响应式图片srcset全新释义sizes属性w描述符</a></li>
</ul>
<p>更多阅读：</p>
<ul>
<li><a href="http://timkadlec.com/2013/06/why-we-need-responsive-images/" target="_blank" rel="external">Why We Need Responsive Images</a></li>
<li><a href="http://alistapart.com/article/mo-pixels-mo-problems" target="_blank" rel="external">Mo’ Pixels Mo’ Problems</a></li>
<li><a href="https://css-tricks.com/responsive-images-youre-just-changing-resolutions-use-srcset/" target="_blank" rel="external">Responsive Images: If You’re Just Changing Resolutions, Use Srcset</a></li>
<li><a href="http://www.smashingmagazine.com/2013/07/choosing-a-responsive-image-solution/" target="_blank" rel="external">Choosing a Responsive Image Solution</a></li>
<li><a href="https://responsiveimages.org/" target="_blank" rel="external">ResponsiveImages.org</a></li>
<li><a href="http://sebastien-gabriel.com/designers-guide-to-dpi/#multiplier" target="_blank" rel="external">Designers Guide to DPI</a></li>
</ul>
<p>原文链接：<a href="http://jonyablonski.com/2015/responsive-image-workflow/" target="_blank" rel="external">http://jonyablonski.com/2015/responsive-image-workflow/</a></p>
<blockquote class="blockquote-center">Baskin-Robbins always finds out.<br></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://liyaodong.qiniudn.com/uploads/2015/1018/car.jpg&quot; alt=&quot;响应式图片&quot;&gt;&lt;br&gt;如今开发一个网站不是响应式都不好意思拿出来，那么作为响应式中的重要一环「响应式图片」你又是如何解决的呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="http://liyaodong.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Facebook 里的那些触动人心的海报</title>
    <link href="http://liyaodong.com/2015/08/30/move-fast-and-break-things/"/>
    <id>http://liyaodong.com/2015/08/30/move-fast-and-break-things/</id>
    <published>2015-08-30T09:05:05.000Z</published>
    <updated>2017-01-03T11:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://liyaodong.qiniudn.com/uploads/2015/0830/1400banner.jpg" alt="move fast and break things"><br>不管是不是 Facebook 里的海报，这些标语确实触动了我。</p>
<a id="more"></a>
<p>我不是一个特别特殊的人，我也会跟风。可能某些人成功后说的话大家就是相信，这是事实。</p>
<p>这些标语可能和你看过的很多标语一样，几行字，也不是那么起眼。可能很多人看了就不会再看第二眼，没有什么特别的地方。也是，这可以理解。不过可能在未来的某一天，你突然看到了这些标语，心里大悟。就像是那个夏天的午后，你看见她和朋友走过操场，微风吹起了她的刘海，你看到她水灵的眼睛而喜欢上她一样。这些东西就是每个人都会有不一样的理解。</p>
<blockquote>
<p>Move Fast Break Things</p>
</blockquote>
<p>对于一个新的 idea，你可能花了很久的时间去想这个怎么做，结果想了好几个小时甚至好几天之后朋友突然叫你去玩游戏。于是你想是啊，想了这么久了去放松一下把。再后来你想也不想了，于是这个 idea 就没了。是的，没了。行动力，执行里很重要。不管做出来效果怎么样，先做出来。然后再改这都可以，关键是先做出来。做的过程中会遇到 many many 多的问题，然后在解决问题的过程中你成长了，这比光想光规划收获要来得多。</p>
<blockquote>
<p>First do it, then do it right, then do it better.</p>
<p>——Addy Osmani</p>
</blockquote>
<p>这句话也有异曲同工之妙，先做出来。当然，还有下面这句：</p>
<p><img src="http://liyaodong.qiniudn.com/uploads/2015/0830/doneisbetterthanperfect_6-20a-01.jpg" alt="done is better than perfect"></p>
<p>不好意思，图有点大，颜色有点亮，看着很不舒服。<strong>做完比完美更重要</strong>。这是什么扯淡的道理，难道不应该追求完美吗…</p>
<p>不是不让你追求完美，而是<strong>在对的时候做对的事情</strong>。该做完的时候就不要考虑完美，什么技术、效果、创意，都不重要，先做完，然后再追求完美。换句话也就是识时务者为俊杰，当然如果有时间那必须追求完美。</p>
<p><img src="http://liyaodong.qiniudn.com/uploads/2015/0830/fortunefavoursthebold_6-20a-01.jpg" alt="fortune favours the bold"></p>
<p>勇者天佑，说实话这是有道翻译出来的。并不知道是什么意思，英语学得不好。</p>
<p><code>ˈfɔːtʃuːn ˈfeɪvə ðə bəʊld</code> 对，这个是音标。这下我大概懂了，好运/财富 眷顾勇者。要勇敢的去做，英语不好没关系。英语也算是第二母语了，不会正常。但如果你需要学好英语，你应该学好那你就要勇敢的正视自己英语不好的这个事实。勇敢的去学，去用，去发音，不要在意其他人的看法。你是你心中唯一的神，你知道你应该怎样去做。（我并没有说教的意思，如果我让你觉得我是站在一个长者的角度去说教，那我向你道歉。我不是长者，我在对自己说。）</p>
<p><img src="http://liyaodong.qiniudn.com/uploads/2015/0830/proceedandbebold_6-20a-01.jpg" alt="proceed and be gold"></p>
<p>前进并敢于冒险</p>
<p><img src="http://liyaodong.qiniudn.com/uploads/2015/0830/stayfocusedandkeepshipping_1-31b-01.jpg" alt="stay focused and keep shipping"><br>关于这句话大多数的翻译是 <code>保持专注并持续发布</code> 我觉得可以理解为保持专注并持续运作，毕竟不一定大家都是写代码的（对于我们来说，not facebook）。</p>
<p>最后一句</p>
<blockquote>
<p>the foolish wait<br>傻逼才会等待</p>
</blockquote>
<p>至少在我认为这个世界是属于实干派的，不管你是写了一篇博文，还是写了一段代码，还是看了会书。总之你自己知道你在做什么。你不需要做给谁看，就像小时候老师、家长对我们说了无数遍的话。你不是为了别人而学习。好讨厌我也说出了这么教条的话。好了最后的最后奉上一段 TED 的视频，请自带梯子、板凳和瓜子。</p>
<iframe width="720" height="405" src="https://www.youtube.com/embed/NHopJHSlVo4" frameborder="0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://liyaodong.qiniudn.com/uploads/2015/0830/1400banner.jpg&quot; alt=&quot;move fast and break things&quot;&gt;&lt;br&gt;不管是不是 Facebook 里的海报，这些标语确实触动了我。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用 Gulp 加速 HTML 邮件开发</title>
    <link href="http://liyaodong.com/2015/08/06/gulp-mail-workflow/"/>
    <id>http://liyaodong.com/2015/08/06/gulp-mail-workflow/</id>
    <published>2015-08-06T06:29:31.000Z</published>
    <updated>2017-01-03T11:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://liyaodong.qiniudn.com/uploads/2015/0806/mailcheck-hd.jpg" alt="mailcheck dribbble@Eddie Lobanovskiy"><br>如果说前端里最痛苦的事情是什么，那一定是用行内样式和 table 写响应式的 HTML 邮件了。</p>
<a id="more"></a>
<p>既然是痛点，那就解决它。</p>
<h3 id="第一步，解决行内样式引用的问题"><a href="#第一步，解决行内样式引用的问题" class="headerlink" title="第一步，解决行内样式引用的问题"></a>第一步，解决行内样式引用的问题</h3><p>邮件内不能使用 <code>&lt;link&gt;</code> 来引入 CSS 样式，因此写邮件就十分痛苦。行内样式无法公用 CSS 而且写起来也很费劲，维护起来更痛苦。因此我们需要外链的样式。</p>
<p>通过 <a href="https://www.npmjs.com/package/gulp-inline-css" target="_blank" rel="external">gulp-inline-css</a> 这个插件可以很方便的将外链样式转化为行内样式。</p>
<p>这个插件很屌，不过仍然有坑。后面再说。</p>
<h3 id="如果-HTML-也能复用"><a href="#如果-HTML-也能复用" class="headerlink" title="如果 HTML 也能复用"></a>如果 HTML 也能复用</h3><p>对于相同的部分例如头部和底部，当然是抽出模板来写更方便。邮件编写这么小的事情想当然用不上 <code>swig</code> <code>jade</code> 这种东西，Break a fly upon a wheel。</p>
<p><a href="https://www.npmjs.com/package/gulp-file-include" target="_blank" rel="external">gulp-file-include</a> 就是我们想要的东西，虽然是简单的 file inlcude，但是对于编写邮件已经足够了。</p>
<h3 id="看起来已经够了，如果再加一些调料"><a href="#看起来已经够了，如果再加一些调料" class="headerlink" title="看起来已经够了，如果再加一些调料"></a>看起来已经够了，如果再加一些调料</h3><p>再加上 <code>stylus</code> CSS 预处理器，本地文件服务器以及浏览器自动刷新(Livereload) …</p>
<p>Perfect，比起以前直接写静态好了太多。</p>
<h3 id="inline-css-的一些坑"><a href="#inline-css-的一些坑" class="headerlink" title="inline-css 的一些坑"></a>inline-css 的一些坑</h3><p>在开发过程中发现如果嵌入 <code>&lt;%= @user.username%&gt;</code> 这样的语句是编译后就成了 <code>&lt;%= @user.username=&quot;&quot;%&gt;</code>，这样放到 Ruby erb 中显然无法运行。经过排除发现是 <code>inline-css</code> 这个包的问题。其实仔细思考这样的结果也在情理之中，<code>&lt;abc</code> 本身就是 HTML 的标签形式。默认给属性加了空值其实也能理解，虽然 HTML5 推荐 <code>disabled=&quot;disabled&quot;</code> 直接写成 <code>disabled</code>。那么如何解决呢？</p>
<p>写的时候写成 <code>|%</code> 最后全局搜索替换成 <code>&lt;%</code> 不就好了。这是我最初的想法，确实挺 low 。这种事情就不应该手动去做，不如写个 Gulp 函数来处理这件事情。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceStr</span>(<span class="params">type</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">transform</span>(<span class="params">file, cb</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(type === <span class="string">'replace'</span>) &#123;</div><div class="line">      file.contents = <span class="keyword">new</span> Buffer(<span class="built_in">String</span>(file.contents).replace(<span class="regexp">/&lt;%/g</span>, <span class="string">'|%'</span>));</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      file.contents = <span class="keyword">new</span> Buffer(<span class="built_in">String</span>(file.contents).replace(<span class="regexp">/\|%/g</span>, <span class="string">'&lt;%'</span>));</div><div class="line">    &#125;</div><div class="line">    cb(<span class="literal">null</span>, file);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'event-stream'</span>).map(transform);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line">    .pipe(replaceStr(<span class="string">'replace'</span>))</div><div class="line">    .pipe(inlineCss(&#123;</div><div class="line">      <span class="attr">applyStyleTags</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">removeStyleTags</span>: <span class="literal">false</span></div><div class="line">    &#125;))</div><div class="line">    .pipe(replaceStr(<span class="string">'fix'</span>))</div><div class="line"></div><div class="line"><span class="comment">// ...</span></div></pre></td></tr></table></figure>
<p>并没有什么难度的一个功能，但确实方便了不少。</p>
<p>完整的DEMO <a href="https://github.com/liyaodong/gulp_mail_workflow" target="_blank" rel="external">github@liyaodong/gulp_mail_workflow</a></p>
<p>头图来自 <a href="https://dribbble.com/shots/654389-mailcheck" target="_blank" rel="external">dribbble@Eddie Lobanovskiy</a> 侵删</p>
<blockquote class="blockquote-center"><br>I prefer my history dead. Dead history is writ in ink, the living sort in blood.<br></blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://liyaodong.qiniudn.com/uploads/2015/0806/mailcheck-hd.jpg&quot; alt=&quot;mailcheck dribbble@Eddie Lobanovskiy&quot;&gt;&lt;br&gt;如果说前端里最痛苦的事情是什么，那一定是用行内样式和 table 写响应式的 HTML 邮件了。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用 you-get 来下载视频网站上的视频</title>
    <link href="http://liyaodong.com/2015/07/26/using-you-get-to-download-the-video/"/>
    <id>http://liyaodong.com/2015/07/26/using-you-get-to-download-the-video/</id>
    <published>2015-07-26T10:09:40.000Z</published>
    <updated>2017-01-03T11:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://liyaodong.qiniudn.com/uploads/2015/0726/Download_Clockwise.gif" alt="Download_by_Clockwise"><br>自从有了 you-get ，麻麻再也不用担心下不了视频了 😁<br><a id="more"></a></p>
<h3 id="you-get-是干什么的？"><a href="#you-get-是干什么的？" class="headerlink" title="you-get 是干什么的？"></a>you-get 是干什么的？</h3><p>当你看到优酷或者B站上牛叉的视频，你想下载但是没法下载下来。因为你不是会员或者因为你找不到下载按钮在哪里…😂 </p>
<p>如果你会一些前端，那么或许你会通过 Chrome 审查元素来进行嗅探视频地址。如果你没有 Chrome 你也可以在看视频之前清楚 Cookies 然后看一遍视频然后找到视频文件。</p>
<p>或者你会装一个迅雷浏览器扩展插件之类的，直接右键嗅探视频地址。</p>
<p>或者你会用一些在线视频网站提取的网站之类的方法。</p>
<p>如果你已经会这项技能那就没有必要看了，除非你想更有B格的下载视频。</p>
<blockquote>
<p>You-Get is a video downloader for YouTube, Youku, niconico and a few other sites.</p>
<p><a href="https://you-get.org/" target="_blank" rel="external">官方网站</a><br><a href="https://github.com/soimort/you-get" target="_blank" rel="external">Github</a></p>
</blockquote>
<p>简单的来说 <code>you-get</code> 是一个用来下载视频网站的命令行工具。用它下载视频只需要在命令行输入：</p>
<p><code>$ you-get http://youtu.be/sGwy8DsUJ4M</code></p>
<p>So Easy, but not easy, 首先你得有 Python3 的环境。其实官网上的介绍已经很清楚了，不过这里会简单的再汉化精简一下。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>####Step1 安装 Python 3<br><a href="https://www.python.org/downloads/release/python-343/" target="_blank" rel="external">windows python3 最新版</a></p>
<p><a href="https://www.python.org/downloads/release/python-343/" target="_blank" rel="external">MAC python3 最新版</a></p>
<p><a href="https://www.python.org/downloads/" target="_blank" rel="external">Linux? 不可能有 Linux 用户看这个我在这扯淡</a></p>
<p>####Step2 安装 you-get<br>MAC 用户打开终端输入 <code>sudo pip3 install you-get</code><br>Windows 用户打开命令控制台 输入 <code>pip3 install you-get</code><br>这一步是要在 python3 安装完毕后进行的，如果提示你 pip3 命令不存在那就是因为你的 python3 没有安装好。</p>
<p>####Step3 下载你想下载的视频<br><img src="http://liyaodong.qiniudn.com/uploads/2015/0726/screenshot.png" alt="screenshot"><br>我这里测试下载这么一个视频连五秒都不到就下载完了，用它下载 B站 的视频简直爽歪歪，而且发现它甚至会下载下来 B站 的弹幕。虽然不知道这个 xml 文件要怎么打开但是感觉很屌的样子。</p>
<p>好了，又是一边扯淡文。小白看不懂，高手不屑看的扯淡文。就当练打字速度了 &lt;(▰˘◡˘▰)&gt;</p>
<p>头图来自 <a href="https://dribbble.com/shots/2012292-Download-Progress" target="_blank" rel="external">dribbble@ Nick Buturishvili</a> 侵删</p>
<blockquote class="blockquote-center"><br>Love is the one thing we’re capable of perceiving that transcends time and space. <br> Interstellar<br></blockquote>


]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://liyaodong.qiniudn.com/uploads/2015/0726/Download_Clockwise.gif&quot; alt=&quot;Download_by_Clockwise&quot;&gt;&lt;br&gt;自从有了 you-get ，麻麻再也不用担心下不了视频了 😁&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于时间的一些自我总结</title>
    <link href="http://liyaodong.com/2015/07/12/control-your-time/"/>
    <id>http://liyaodong.com/2015/07/12/control-your-time/</id>
    <published>2015-07-12T00:35:30.000Z</published>
    <updated>2017-01-03T11:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://liyaodong.qiniudn.com/uploads/2015/0712/beach.jpeg" alt="沙滩"><br>时间管理这个看起来虚无缥缈的事情必须有一些简单可实现的原则，从一点一滴做起慢慢养成好习惯。</p>
<a id="more"></a>
<p>最近在看<a href="https://twitter.com/xiaolai" target="_blank" rel="external">李笑来</a>老师的<a href="http://zhibimo.com/explore/books/ba-shi-jian-dang-zuo-peng-you" target="_blank" rel="external">把时间当朋友</a>一书，深有感触。书中提到的最多的一句话便是：</p>
<blockquote>
<p>时间不可被管理，一切都靠积累</p>
</blockquote>
<p>相对于以前看过的各种<strong>时间管理</strong>文章来说，笑来老师的文章很贴近真实。没有说教的感觉，学习了。</p>
<h3 id="先来说说态度上"><a href="#先来说说态度上" class="headerlink" title="先来说说态度上"></a>先来说说态度上</h3><p><strong>人并不是完美的</strong>，要承认自己不完美并正视自己的缺点。所以当自己懒，或者拖延症又犯了或者效率又低了的时候，一定要调整好心态。有时候事情很多人就很容易焦躁，既焦虑又难受，好多事情啊！做不完了怎么办怎么办！于是抱怨了一会又去刷微博了，结果到晚上了还是一件事情都没做。</p>
<p>所以如果你的事情很多的时候，一定不能焦虑。个人觉得最好的方法是奖励自己，每完成一件事情的时候奖励自己玩会游戏或是买自己想买的东西，或者去吃一顿大餐，或者仅仅是勾掉 Wunderlist 上的一个代办事项听一听那一声清脆的 叮~</p>
<p>这一切都是提醒自己，不能焦虑。焦虑对效率的提升没有一点帮助。</p>
<h3 id="做事的习惯"><a href="#做事的习惯" class="headerlink" title="做事的习惯"></a>做事的习惯</h3><p>你正在忙自己的一件事情，你已经做到关键点了。这时候旁边有人问：Hey, 你能不能帮我看一下我的电脑。然后你走过去两分钟搞定了，回来忘记自己干到哪了。</p>
<p>有事情需要做的时候第一件事不是立即去做，而是<strong>先记下来</strong>。这里的事情并不是任何事情，上个厕所总不会也要记一下吧。把事情记下来，然后归纳整理大概的分一下，有些事情是要在特定的时间或地点，有些事情是重要的，今天必须做完的。</p>
<p>对于特定条件的事情，可以设置提醒。日历、闹钟、或者专业的软件，能提醒你就行。</p>
<p>对于重要的事情，第一时间完成。</p>
<p>这很有必要，把要做的事情记下来，当你有时间的时候你就不会无所事事了。很多时候我们不知道干什么就一遍一遍的刷朋友圈、看微博。这些时间都可以用来阅读，或者昨晚今天要做的某件事情。</p>
<p><strong>拒绝拖延症，拒绝拖延症，拒绝拖延症。</strong>拖延是一种习惯，小时候开始就把作业都放到周日下午去做，到现在很多时候都会有拖延症。一开始会觉得这根本不可能，但我现在觉得自己的拖延症好很多了。拖延症犯了的时候就告诉自己，不就这么点事么，闭着眼睛都做完了。不想做什么都困难，告诉自己很简单，真正开始做的时候就停不下来了。</p>
<p>自控是一种能力，很多时候成败就取决于自控的能力。</p>
<h3 id="方法-amp-技巧"><a href="#方法-amp-技巧" class="headerlink" title="方法&amp;技巧"></a>方法&amp;技巧</h3><p>关于这一类（GTD，Getting Things Done）的软件有很多，最出名的莫属 <code>OmniFocus</code>。但是我个人觉得 <code>OmniFoces</code> 学习成本挺高，初学者不妨从比较简单的 <code>Wunderlist</code> 来做起。和时间相处本身就是一种意识和习惯，软件只是工具。领悟思想之后不妨再学习更加有用的工具，让自己变的更高效。</p>
<p>最后，附上最后一句话。从现在开始，立即去做。看再多文章不立即改变是没有什么卵用的。</p>
<blockquote class="blockquote-center"><br>keep it simple, simple is good.<br></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://liyaodong.qiniudn.com/uploads/2015/0712/beach.jpeg&quot; alt=&quot;沙滩&quot;&gt;&lt;br&gt;时间管理这个看起来虚无缥缈的事情必须有一些简单可实现的原则，从一点一滴做起慢慢养成好习惯。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微信调试的那些事</title>
    <link href="http://liyaodong.com/2015/07/06/%E5%BE%AE%E4%BF%A1%E8%B0%83%E8%AF%95%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://liyaodong.com/2015/07/06/微信调试的那些事/</id>
    <published>2015-07-06T13:26:51.000Z</published>
    <updated>2017-01-03T11:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://liyaodong.qiniudn.com/uploads/2015/0706/Coding_Laboratory.gif" alt="Coding Laboratory"></p>
<p>微信内调试这件头疼的事情终于有一些靠谱的解决办法了。<br><a id="more"></a></p>
<p>最开始，我是用 <code>UA</code> 来调试的，当然只能调试一些你自己针对微信写的东西，比如针对微信的分享提示之类的。自从 <a href="http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html" target="_blank" rel="external">微信JS-SDK</a> 发布后很多时候都有点无能为力的感觉。因为不好调试的原因经常和微信大干到半夜。为了以后不再大干到半夜 (<em>≧∀≦</em>) 总结经验给自己，也给需要的人。</p>
<p>在开始总结之前先说<strong>重要</strong>的，<a href="http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html" target="_blank" rel="external">微信文档</a>看三遍，<a href="http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html" target="_blank" rel="external">微信文档</a>看三遍，<a href="http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html" target="_blank" rel="external">微信文档</a>看三遍。</p>
<h3 id="如何区分微信浏览器？"><a href="#如何区分微信浏览器？" class="headerlink" title="如何区分微信浏览器？"></a>如何区分微信浏览器？</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isWechat</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="regexp">/micromessenger/i</span>.test(navigator.userAgent);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="如何在桌面浏览器中模拟微信？"><a href="#如何在桌面浏览器中模拟微信？" class="headerlink" title="如何在桌面浏览器中模拟微信？"></a>如何在桌面浏览器中模拟微信？</h3><p>参考我之前写的文章 <a href="http://liyaodong.com/2015/02/27/%E4%BD%BF%E7%94%A8Chrome%E6%A8%A1%E6%8B%9F%E5%BE%AE%E4%BF%A1%E6%B5%8F%E8%A7%88%E5%99%A8/">使用Chrome模拟微信浏览器</a></p>
<h3 id="如何调试微信JS-SDK？"><a href="#如何调试微信JS-SDK？" class="headerlink" title="如何调试微信JS-SDK？"></a>如何调试微信JS-SDK？</h3><h4 id="1-通过官方的debug-参数"><a href="#1-通过官方的debug-参数" class="headerlink" title="1. 通过官方的debug 参数"></a>1. 通过官方的debug 参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wx.config(&#123;</div><div class="line">    <span class="attr">debug</span>: <span class="literal">true</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="2-通过-host-文件替换域名，本地代理调试"><a href="#2-通过-host-文件替换域名，本地代理调试" class="headerlink" title="2. 通过 host 文件替换域名，本地代理调试"></a>2. 通过 <code>host</code> 文件替换域名，本地代理调试</h4><p>微信是有 <code>JS接口安全域名</code> 限制的，所以想要本地调试最重要的是解决这个问题。具体在 <strong>右上角公众号名称</strong>-<strong>公众号设置</strong>-<strong>功能设置</strong>里面。</p>
<p>想要把域名映射到本地显然是改 <code>host</code> 文件方便一些，因为你不太可能把线上的域名改成本地，虽然有三个可以改。</p>
<p>Mac 下修改<code>host</code> <code>sudo vi /etc/hosts</code></p>
<p>改完 <code>host</code> 之后你还需要做代理。因为你的手机并没有改 <code>host</code> ，所以你需要在手机上设置电脑为代理。然后手机通过代理访问走 <code>host</code> 映射到本地。这件事情可以用 <a href="http://goddyzhao.me/nproxy/" target="_blank" rel="external">NProxy</a> 来做。当然这是 Mac 下的解决方案，如果你是 <code>Win</code> 自然是功能强大的 <a href="http://www.telerik.com/fiddler" target="_blank" rel="external">fiddler</a> 来做这件事情比较好（虽然我也没用过）。</p>
<p><code>NProxy</code> 安装并启动后，在手机上设置代理。IOS 下是在 wifi 右边的感叹号，最底下输入。通过这两部就可以本地调试微信 JS 了。</p>
<h3 id="服务器端的微信接口？"><a href="#服务器端的微信接口？" class="headerlink" title="服务器端的微信接口？"></a>服务器端的微信接口？</h3><p>微信有一个测试号专门用来调试、解决这些问题。测试号相当于一个临时的公众号，把程序调试开发完毕后再换成你真正的公众号配置。 <a href="http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="external">微信测试号平台地址</a></p>
<p>这种测试方法如果想测试本地的应用有个问题就是外网怎么访问本地应用，类似于花生壳的意思，不过推荐使用 <a href="https://ngrok.com/" target="_blank" rel="external">ngrok</a> 这款牛逼哄哄的东西。方便简单，支持 <code>https</code>，就是速度没有改<code>host</code>的方法快。</p>
<p>到此为止我们至少有两套方案可以测试，改 <code>host</code> 的方法不走外网，速度快。<code>ngrok</code> 配合官方的工具功能强大但速度有时候很慢。</p>
<h3 id="一些问题（Ruby-on-Rails用户）"><a href="#一些问题（Ruby-on-Rails用户）" class="headerlink" title="一些问题（Ruby on Rails用户）"></a>一些问题（Ruby on Rails用户）</h3><p>我是 <code>Rails</code> 用户，本地 <code>host</code> + 代理还是要在域名后跟端口号。而 <code>Mac</code> 下 <code>1024</code> 以下的端口都需要 <code>root</code> 权限。即便你可以 <code>root</code> 运行也会发现有很多配置有问题了，比如 <code>PG</code>。</p>
<p>对于 <code>rbenv</code> 用户来说推荐使用 <a href="https://github.com/dcarley/rbenv-sudo" target="_blank" rel="external">rbenv-sudo</a> 来解决需要使用 <code>root</code> 权限来运行 <code>Ruby</code> 的情况。安装好 <code>rbenv-root</code> 后… 对于我这种懒人… <code>~/.zshrc</code> <code>sudors () { rbenv sudo rails s -p 80 -b 0.0.0.0 }</code></p>
<p>针对 <code>PG</code> 报错你需要编辑 <code>config.yml</code> 给数据库指定用户名。</p>
<p>当 <code>root</code> 运行过后普通权限下 <code>rails</code> 启动报错，很可能是缓存文件是由 <code>root</code> 用户创建而普通用户无法读取导致的。用 <code>root</code> 权限删除缓存即可<code>sudo rm -rf ./tmp/cache</code> 。</p>
<p>如果 <code>Rails</code> 已经启动本地可以访问但局域网其他设备无法访问，你需要指定运行的 IP 为 <code>0.0.0.0</code> <code>rails s -p 0.0.0.0</code></p>
<h3 id="说了那么多，说好的调试呢？"><a href="#说了那么多，说好的调试呢？" class="headerlink" title="说了那么多，说好的调试呢？"></a>说了那么多，说好的调试呢？</h3><p>微信内没有 <code>console</code> 没有 <code>Devtools</code>，样式错乱，JS 报错根本不知道有木有！</p>
<p>如果 Chrome 的开发者工具可以运行在微信里就好了，然而… 这个东西确实有！</p>
<p><a href="http://people.apache.org/~pmuellr/weinre-docs/latest/" target="_blank" rel="external">weinre</a> <strong>WE</strong>b <strong>IN</strong>spector <strong>RE</strong>mote 一款在 Chrome 里调试 Android、IOS 网页的东西，不管是哪家的浏览器，还是 <code>webview</code> ，通吃。</p>
<p><code>npm -g install weinre</code></p>
<p><code>weinre --boundHost 0.0.0.0</code></p>
<p>然后在你的项目里引入 <code>weinre</code> 的一个 JS 文件就可以用了。需要注意的是引入的时候地址应该是 <code>http://192.168.1.*/xxx.js</code> 这样的局域网可访的地址。那么问题来了，局域网 IP 怎么查… Mac 下最快的方法，按住 option 点 Wifi 图标。（感谢 <a href="http://macshuo.com/" target="_blank" rel="external">MacTalk</a>）</p>
<h3 id="还有没有更方便的东西？"><a href="#还有没有更方便的东西？" class="headerlink" title="还有没有更方便的东西？"></a>还有没有更方便的东西？</h3><p>当你想用手机访问电脑本地服务器的时候你会怎么做？</p>
<p>看今天的局域网 IP 多少，然后从 QQ 或者微信里拼好要访问的链接地址，发过去，如此反复。</p>
<p>不知道多少喝咖啡陪女朋友的时间都没了。</p>
<p>Geek 就是要动手解决痛点，URL2QR 你需要这么一个插件。</p>
<p><a href="https://chrome.google.com/webstore/detail/url2qr/pmlpmeejppihnemepiadkmnghmbclhpg" target="_blank" rel="external">Chrome 商店安装</a></p>
<p><a href="http://liyaodong.com/2015/01/30/%E6%96%B0%E7%9A%84Chrome%E6%8F%92%E4%BB%B6%E3%80%8CURL2QR%E3%80%8D/">这个屌插件是怎么写的？</a></p>
<p>说了这么多，以后应该或许再也不用担心微信调试了吧。但愿如此，细心认真扩展思路还是排除 Bug 最快的方法。</p>
<p>The End .</p>
<p>头图来自 <a href="https://dribbble.com/shots/1727546-Coding-Laboratory?list=searches&amp;tag=code&amp;offset=65" target="_blank" rel="external">dribbble@Valentin Kirilov</a> 侵删</p>
<blockquote class="blockquote-center">There is only one God，and his name is Death. And there is only one thing we say to Death:“Not today.”</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://liyaodong.qiniudn.com/uploads/2015/0706/Coding_Laboratory.gif&quot; alt=&quot;Coding Laboratory&quot;&gt;&lt;/p&gt;
&lt;p&gt;微信内调试这件头疼的事情终于有一些靠谱的解决办法了。&lt;br&gt;
    
    </summary>
    
    
      <category term="微信" scheme="http://liyaodong.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>更简单纯粹的晓风博客</title>
    <link href="http://liyaodong.com/2015/07/04/%E6%9B%B4%E7%AE%80%E5%8D%95%E7%BA%AF%E7%B2%B9%E7%9A%84%E6%99%93%E9%A3%8E%E5%8D%9A%E5%AE%A2/"/>
    <id>http://liyaodong.com/2015/07/04/更简单纯粹的晓风博客/</id>
    <published>2015-07-04T14:09:08.000Z</published>
    <updated>2017-01-03T11:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://liyaodong.qiniudn.com/uploads/2015/0704/pen.jpg" alt="new blog" title="new blog"><br>纯粹的写作，像风一样的晓风博客。<br><a id="more"></a></p>
<p>时光久了，只有那些最纯朴的东西才会被存留下来。像一颗水晶，或是一颗珍珠。经过岁月的摧残，留下了最值得留下得部分。</p>
<p>晓风博客是从 2012 年开始的，虽然已经过了三个年头，但留下的令人印象深刻的文章却寥寥无几。这期间博客换了两个主题，两种系统。时光在变，我的博客也在变。从最初的 <code>Wordpress</code> 默认主题，到后来套用别人模仿 <a href="http://cdc.tencent.com/" target="_blank" rel="external">腾讯CDC</a> 的主题，再到后来自己写的一款 <a href="https://github.com/liyaodong/wp-theme-dongdong" target="_blank" rel="external">小清新主题 —— 晓风</a>，再到现在更换成 <a href="https://hexo.io/" target="_blank" rel="external">hexo</a> ，不得不说我是一个喜欢折腾的人。</p>
<p><img src="https://raw.githubusercontent.com/liyaodong/hybrid-dongdong/master/images/banner.jpg" alt="小清新主题 —— 晓风"></p>
<p>###为什么要从 wordpress 换到 hexo ?<br><code>wordpress</code> 是世界上最流行的博客系统之一，也是安装特别简单的一款 PHP 博客。对于初学者来说再适合不过。而且 <code>wordpress</code> 本身功能强大生态丰富，各种插件应有尽有。</p>
<p>那既然 <code>wordpress</code> 这么好为什么要换？</p>
<p>纯粹。这是目前我对博客的要求，或许将来会变。但博客本身就应该只留文字，没有多余的东西。更简单的说，<code>wordpress(wp)</code> 上的很多功能都是不必须的，并且 <code>wp</code> 不支持 <code>markdown</code>。这是痛点，很多通过 <code>wordpress</code> 的富文本编辑器写出来的东西最后移植性都不好。除此之外或许 <code>wordpress</code> 博客的逼格不够高也是一个原因。满大街都是 <code>wordpress</code>。</p>
<p><code>hexo</code> 是一款静态博客，用 <code>markdown</code> 写好之后发布就好。 <code>hexo</code> 会将你所使用的主题套上你写的文章，发布成可爱的<code>HTML``CSS``JS</code>。这样你的主机不需要 <code>PHP</code> 环境的支持，而且你的文章会保存成 <code>markdown</code> 文件安稳的躺在 <code>Git</code>系统里。看得见，虽然摸不着。</p>
<p>这是更换博客后的第一篇博文，希望我的博客能越来越纯粹，没有过于华丽的背景图片，没有华而不实的各种功能。让写作成本更低，更像一个博客。</p>
<p>头图来自<a href="https://dribbble.com/shots/1180985-Calligraphy?list=searches&amp;tag=pen&amp;offset=13" target="_blank" rel="external">dribbble @ Mike | Creative Mints</a> 侵删</p>
<p>The End </p>
<blockquote class="blockquote-center"><br>valar morghulis, valar dohaeris.<br></blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://liyaodong.qiniudn.com/uploads/2015/0704/pen.jpg&quot; alt=&quot;new blog&quot; title=&quot;new blog&quot;&gt;&lt;br&gt;纯粹的写作，像风一样的晓风博客。&lt;br&gt;
    
    </summary>
    
    
      <category term="心路旅程" scheme="http://liyaodong.com/tags/%E5%BF%83%E8%B7%AF%E6%97%85%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>web滚动性能优化及兼容问题</title>
    <link href="http://liyaodong.com/2015/05/07/web%E6%BB%9A%E5%8A%A8%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%8F%8A%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/"/>
    <id>http://liyaodong.com/2015/05/07/web滚动性能优化及兼容问题/</id>
    <published>2015-05-07T05:04:51.000Z</published>
    <updated>2017-01-03T11:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://liyaodong.qiniudn.com/uploads/2015/05/mouse.jpg" alt="mouse"><br>如果滚动仅仅是onscroll那么简单那么本文就没有存在的必要了，至于兼容这个老生常谈的问题……还是呵呵吧。<a id="more"></a></p>
<h3 id="先来说说需求"><a href="#先来说说需求" class="headerlink" title="先来说说需求"></a>先来说说需求</h3><p>某日看到某文发现其网站有一很舒适的设计，即当你向下看文章的时候会提示你看到多少了。细心一想这个主意还是蛮有用的，遂「<del>抄袭</del>」之。</p>
<blockquote>
<p>某文某网站：<a href="http://www.ozy.com/pov/teaching-kids-code/3238" target="_blank" rel="external">http://www.ozy.com/pov/teaching-kids-code/3238</a></p>
<p>  最终效果：<a href="http://www.geekpark.net/topics/171430" target="_blank" rel="external">http://www.geekpark.net/topics/171430</a></p>
</blockquote>
<h3 id="开撸"><a href="#开撸" class="headerlink" title="开撸"></a>开撸</h3><p>呵，不就是这么个小小的功能么，都不用打开我的Sublime，vi都搞定了。</p>
<blockquote>
<ol>
<li>先画个 <code>div</code> ，然后 <code>position: fixed</code> 到最顶部，然后 <code>width: 0</code> 调整颜色 balabala….<p></p></li>
<li>然后根据js监听浏览器滚动，用已滚动的部分的高度 <code>-</code> 文章距离顶部的高度 <code>=</code> 已阅读部分文章的高度。然后用这个高度除以文章总高度就等于阅读百分比。</li>
</ol>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> $line = $(<span class="string">'#reading_progress'</span>),</div><div class="line">      $article = $(<span class="string">'#article'</span>),</div><div class="line">      articleH = $article.height(),</div><div class="line">      articleMt = $article.offset().top;</div><div class="line"></div><div class="line">  <span class="built_in">window</span>.onscroll = render;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> readed = $(<span class="built_in">window</span>).scrollTop() - articleMt,</div><div class="line">        progress;</div><div class="line">    <span class="comment">// 如果超出阅读则不进行操作</span></div><div class="line">    <span class="keyword">if</span>(readed &amp;lt; <span class="number">0</span>) &#123;</div><div class="line">      progress = <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(readed &amp;gt; articleH) &#123;</div><div class="line">      progress = <span class="number">100</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      progress = <span class="built_in">parseInt</span>(readed / articleH * <span class="number">100</span>);</div><div class="line">    &#125;</div><div class="line">    $line.css(<span class="string">'width'</span>, progress + <span class="string">'px'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>看起来好像咩有什么问题了，于是浏览器刷新调试… 好像和别人的效果不太一样，别人的是舒畅的音乐的感觉，我这一卡一卡的感觉像便秘…</p>
<p>恩，可能是因为没有动画吧。祭出我的杀器：<code>transition: all 0.3s</code> 动画神马必备，看了看效果好像好点了。不过感觉还是有些卡顿，心理作用？</p>
<p>好吧，<del datetime="2015-05-07T03:39:50+00:00">可能</del>是 <code>width</code> 触发重绘（repaint）了。</p>
<p>关于浏览器重绘请移步：<a href="http://www.html5rocks.com/en/tutorials/speed/unnecessary-paints/" target="_blank" rel="external">Avoiding Unnecessary Paints</a></p>
<p>那不用 <code>width: 100%</code> 如何做到从 0% - 100% 的阅读进度提示呢？另外一个好的方案是 <code>translateX</code> 或者更好的方案 <code>translate3d</code> ， 为啥？因为相比 <code>width</code> 的变换，<code>translate</code> 不会引发重绘，这对于性能上有优势。而 <code>translateX</code> 和 <code>translate3d</code> 相比，前者已经足够好了但是后者会开启GPU加速，理论上性能更好。所以最后的CSS看起来是酱紫的：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.reading_progress</span></div><div class="line">  <span class="selector-tag">width</span>: 100%</div><div class="line">  <span class="selector-tag">height</span>: 3<span class="selector-tag">px</span></div><div class="line">  <span class="selector-tag">position</span>: <span class="selector-tag">fixed</span></div><div class="line">  <span class="selector-tag">z-index</span>: 999</div><div class="line">  <span class="selector-tag">background-color</span>: <span class="selector-id">#7fc042</span></div><div class="line">  <span class="selector-tag">transform</span>: <span class="selector-tag">translate3d</span>(<span class="selector-tag">-100</span>%, 0, 0)</div><div class="line">  <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 0<span class="selector-class">.3s</span></div></pre></td></tr></table></figure>
<p>CSS的性能优化到这里就要结束啦，其实 <code>position: fixed</code> 已经引发了重绘，优化 <code>width</code> 什么的都是自我安慰。但在以后的项目中还是尽量少的触发重绘，用户体验毕竟是由众多细小的细节组成的。</p>
<p>接下来聊聊JS，这样写功能上是没有太大问题的。问题在于 <code>onscroll</code> 是否性能足够优秀？</p>
<p>参考该文：<br><a href="http://www.html5rocks.com/zh/tutorials/speed/scrolling/" target="_blank" rel="external">Scrolling Performance</a><br><a href="http://kristerkari.github.io/adventures-in-webkit-land/blog/2013/08/30/fixing-a-parallax-scrolling-website-to-run-in-60-fps/" target="_blank" rel="external">Fixing a parallax scrolling website to run in 60 FPS</a><br><a href="http://www.html5rocks.com/en/tutorials/speed/animations/" target="_blank" rel="external">Leaner, Meaner, Faster Animations with requestAnimationFrame</a></p>
<p>夜太长，字太多。不如我来总结一下，总得来说在浏览器滚动的过程中尽量<strong>避免</strong>图片大小的缩放、<code>bow-shadow</code>、<code>width</code>、<code>height</code>等变化。在循环动画等问题上尽量避免使用 <code>setTimeout</code> 而是使用 <code>requestAnimationFrame</code>去代替。这和本文有什么关系呢？在我们的 <code>onscroll</code> 中调用的 render()函数会在滚动发生的时候去触发。其实这是很没有必要的，可以通过加锁的形式让其 <code>60fps</code> 的速度去刷新。具体来看代码可能是酱紫的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> didScroll = <span class="literal">false</span>;</div><div class="line"><span class="keyword">var</span> ua = navigator.userAgent,</div><div class="line">    isMobile = <span class="regexp">/iPhone|iPad|iPod|Android/i</span>.test(navigator.userAgent);</div><div class="line"></div><div class="line"><span class="comment">// better way to loop animation</span></div><div class="line"><span class="built_in">window</span>.requestAnimFrame = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span>  <span class="built_in">window</span>.requestAnimationFrame       ||</div><div class="line">          <span class="built_in">window</span>.webkitRequestAnimationFrame ||</div><div class="line">          <span class="built_in">window</span>.mozRequestAnimationFrame    ||</div><div class="line">          <span class="function"><span class="keyword">function</span>(<span class="params"> callback </span>)</span>&#123;</div><div class="line">            <span class="built_in">window</span>.setTimeout(callback, <span class="number">1000</span> / <span class="number">60</span>);</div><div class="line">          &#125;;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="keyword">if</span>(isMobile) &#123;</div><div class="line">  $(<span class="built_in">document</span>).bind(<span class="string">'touchmove'</span>, updateProgress);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  $(<span class="built_in">window</span>).on(<span class="string">'scroll'</span>, updateProgress);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateProgress</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  didScroll = <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 这个东西不应该在 updateProgress里么？好吧，我试着放进去然后没动画效果了，原因未知。</span></div><div class="line"><span class="comment">// 这样的话即时不滚动也会不停的检查高度信息，但是... 谁看文章不滚动呢...</span></div><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">animloop</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  requestAnimFrame(animloop);</div><div class="line">  <span class="keyword">if</span>(didScroll) &#123;</div><div class="line">    didScroll = <span class="literal">false</span>;</div><div class="line">    render();</div><div class="line">  &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>在移动端应该使用 <code>touchmove</code> 事件而不是 <code>onscroll</code> 事件，但即使使用了 <code>touchmove</code> 事件在我的 ios 8.3 chrome version 42.0上仍然有问题，因为Chrome考虑到性能问题跳过了 <code>touchmove</code>事件。通常来说使用 <code>onscroll</code> 事件在众多移动端浏览器上事件触发是在滚动结束后才触发。而PC端是只要滚动就能触发，因此随滚动而产生的动画会比较流畅。但如果是滚动结束后才产生，那就会表现的有点卡。其实不是性能问题。而 <code>touchmove</code> 在移动端却可以连续触发。虽然在某些浏览器上还是有Bug。</p>
<p><a href="http://tjvantoll.com/2012/08/19/onscroll-event-issues-on-mobile-browsers/" target="_blank" rel="external">onscroll Event Issues on Mobile Browsers</a><br><a href="http://wilsonpage.co.uk/touch-events-in-chrome-android/" target="_blank" rel="external">Touch events in Chrome Android</a></p>
<p>那么这个问题真的没法解决吗？ iScroll 的解决办法是用 JS 模拟滚动，而对于本需求来说确实有那么点杀鸡用牛刀的感觉，毕竟不是什么核心需求。所以直到目前位置这个问题依然在 ios android上 没有解决，期待以后的解决方案。</p>
<p>头图来自<a href="https://dribbble.com/shots/1445181-Mouse-Grid?list=searches&amp;tag=mouse&amp;offset=22" target="_blank" rel="external">Dribbble @Jamal</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://liyaodong.qiniudn.com/uploads/2015/05/mouse.jpg&quot; alt=&quot;mouse&quot;&gt;&lt;br&gt;如果滚动仅仅是onscroll那么简单那么本文就没有存在的必要了，至于兼容这个老生常谈的问题……还是呵呵吧。
    
    </summary>
    
    
      <category term="科技改变生活" scheme="http://liyaodong.com/tags/%E7%A7%91%E6%8A%80%E6%94%B9%E5%8F%98%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>【HTML5】基于客户端的图片裁剪及水印添加功能</title>
    <link href="http://liyaodong.com/2015/03/31/%E3%80%90HTML5%E3%80%91%E5%9F%BA%E4%BA%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA%E5%8F%8A%E6%B0%B4%E5%8D%B0%E6%B7%BB%E5%8A%A0%E5%8A%9F%E8%83%BD/"/>
    <id>http://liyaodong.com/2015/03/31/【HTML5】基于客户端的图片裁剪及水印添加功能/</id>
    <published>2015-03-31T04:52:37.000Z</published>
    <updated>2017-01-03T11:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://liyaodong.qiniudn.com/canvascrop.jpg" target="_blank" rel="external"><img src="http://liyaodong.qiniudn.com/canvascrop.jpg" alt=""></a><br>首先来说说图片裁剪这件事情。<br><a id="more"></a></p>
<p>图片裁剪其实不是什么很难的功能，PS、截图都能轻松做到。或者说，在web端，Flash以及后端程序都有图片裁剪的能力。当然也有水印添加的能力，以<code>PHP</code>（求不黑）为例使用GD库所带的一些函数就可以轻松做到图片裁剪。那么大致流程是酱紫的：<br>既然目前已经有两种方式了，为毛还要再用Canvas来裁剪及添加水印？不妨来对比一下：<br><img src="http://liyaodong.qiniudn.com/canvasscreenshort.jpg" alt=""></p>
<h3 id="服务器端裁剪："><a href="#服务器端裁剪：" class="headerlink" title="服务器端裁剪："></a>服务器端裁剪：</h3><blockquote>
<p>1.兼容性赞赞的，完全没有兼容问题。</p>
<p>  2.简单方便好理解，不牵扯跨域balabala的</p>
<p>  -1.多了两次请求（处女座）</p>
<p>  -2.需要前后端去密切配合</p>
</blockquote>
<h3 id="客户端裁剪："><a href="#客户端裁剪：" class="headerlink" title="客户端裁剪："></a>客户端裁剪：</h3><p>客户端裁剪分成Flash方案和HTML Canvas方案</p>
<blockquote>
<p>共同点：</p>
<p>  1.纯客户端操作，不需要往后端发送请求。</p>
<p>  2.不需要学习一些后端库操作的知识（纯前端可能比后端可能还复杂）</p>
<p>  -1.需要浏览器的支持，或者是Flash，或者是HTML5</p>
<p>  -2.存在兼容性问题以及跨域等问题</p>
<p>  Flash方案你又得懂些flash方面的技术，也有用Flash做crop UI但实际上发送到后端让后端处理的。</p>
<p>  那么H5的方案首先你的目标人群得用 Modem browser ，如果你用户都是IE你还是呵呵睡吧。</p>
</blockquote>
<p>来说说我的方案，用户上传图片后使用jCrop作为图片裁剪UI，裁剪完毕后计算大小、位置信息然后传递给Canvas并生成图片。说这么多都没见到代码真的很伤心哇！</p>
<p>h5crop =&gt;  <a href="https://github.com/geekpark/h5crop" target="_blank" rel="external">https://github.com/geekpark/h5crop</a></p>
<h4 id="以上插件只实现了客户端的图片裁剪，其实还有两个问题没有提到。"><a href="#以上插件只实现了客户端的图片裁剪，其实还有两个问题没有提到。" class="headerlink" title="以上插件只实现了客户端的图片裁剪，其实还有两个问题没有提到。"></a>以上插件只实现了客户端的图片裁剪，其实还有两个问题没有提到。</h4><p>1.裁剪完毕后的canvas可以导出成Base64的图片编码，那么如果是File Object形式的服务端上传应该怎么解决？<br>2.加水印在哪里？</p>
<h5 id="对于问题1，简单粗暴的扔一个插件就懂了。"><a href="#对于问题1，简单粗暴的扔一个插件就懂了。" class="headerlink" title="对于问题1，简单粗暴的扔一个插件就懂了。"></a>对于问题1，简单粗暴的扔一个插件就懂了。</h5><p>Canvas to Blob =&gt;   <a href="https://github.com/blueimp/JavaScript-Canvas-to-Blob" target="_blank" rel="external">https://github.com/blueimp/JavaScriptCanvas-to-Blob</a><br>用于将canvas转换成二进制文件，也就是js中的<code>File Object</code>然后post给服务器就ok<br>这里面有个坑，项目在本地测试完全没问题结果服务器上报错。原因是因为图片涉及跨域，解决办法是给canvas用到的img标签设置 <code>.prop(&#39;crossOrigin&#39;, &#39;Anonymous’)</code> 为毛是<code>prop</code>不是<code>attr</code> ？ Google it .</p>
<h5 id="问题2，图片加水印在哪里？"><a href="#问题2，图片加水印在哪里？" class="headerlink" title="问题2，图片加水印在哪里？"></a>问题2，图片加水印在哪里？</h5><p>真的很不想总结啊，还是放个Gist自己看吧。</p>
<p><a href="https://gist.github.com/liyaodong/c1cdb208a533c26b926c" target="_blank" rel="external">https://gist.github.com/liyaodong/c1cdb208a533c26b926c</a></p>
<p>好困好困，洗洗睡（个人总结，求轻喷）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://liyaodong.qiniudn.com/canvascrop.jpg&quot;&gt;&lt;img src=&quot;http://liyaodong.qiniudn.com/canvascrop.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;br&gt;首先来说说图片裁剪这件事情。&lt;br&gt;
    
    </summary>
    
    
      <category term="科技改变生活" scheme="http://liyaodong.com/tags/%E7%A7%91%E6%8A%80%E6%94%B9%E5%8F%98%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>项目总结什么的必须是要有的</title>
    <link href="http://liyaodong.com/2015/03/31/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93%E4%BB%80%E4%B9%88%E7%9A%84%E5%BF%85%E9%A1%BB%E6%98%AF%E8%A6%81%E6%9C%89%E7%9A%84/"/>
    <id>http://liyaodong.com/2015/03/31/项目总结什么的必须是要有的/</id>
    <published>2015-03-31T04:47:17.000Z</published>
    <updated>2017-01-03T11:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://liyaodong.qiniudn.com/canvasbanner.jpg" alt=""></p>
<p>沃尔沃项目总结…</p>
<a id="more"></a>
<div>项目线上地址？还是算了吧….</div>

<p><a href="http://www.geekpark.net/zhuanti/volvo/" target="_blank" rel="external">手误，别点</a></p>
<ol>
<li>.container 类是必须要有的，这个很有必要。</li>
<li>少用position来定位，在各种平台上表现很不一。（Bootstrap是区间分割法，而且<code>.container</code>有15px的<code>padding</code>）</li>
<li>设计图中实现能用文字的尽量用文字，图片不好维护，改起来特别痛苦，而且显示不清晰，加载慢。</li>
<li>移动端和PC端是否可以应用一个样式？判定标准是PC端是否足够复杂，如果PC端非常复杂，和移动端代码重用太少那就应该另起一个项目。好的方法是通过Ajax动态插入，不好的方法是在<code>&amp;lt;head&amp;gt;</code>中写跳转（万不得已会用？）。</li>
<li>Grunt有性能优化的地方，目前JS压缩耗时太长（7s），简直了。</li>
<li>尽量多用Lazyload，否则性能体验会不够好，尤其会造成JS data数据的阻塞。</li>
<li>静态项目可以抽象出Partial模板，然后在JS中进行填充，这样的好处是移动端PC端公用一份数据。（探寻更好的方法，框架是如何去做的）</li>
<li>微信JS签名校验，其中<code>access_toke</code>和<code>js_ticket</code>是需要缓存的，其他的不需要。往后端传url参数的时候要同域，且推荐使用post请求。因为url中如果微信分享过会增加 <code>?from=groupmessage&amp;amp;isappinstalled=0</code> ，get请求会将 &amp; 左右两次分成两个params 。但如果是post就尽量要求在同一个域，跨域post似乎不太好搞定。而JSONP因其实现原理是 <code>srcript src</code> 所以永远不可能实现JSONP 的post请求。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://liyaodong.qiniudn.com/canvasbanner.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;沃尔沃项目总结…&lt;/p&gt;
    
    </summary>
    
    
      <category term="科技改变生活" scheme="http://liyaodong.com/tags/%E7%A7%91%E6%8A%80%E6%94%B9%E5%8F%98%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>使用Chrome模拟微信浏览器</title>
    <link href="http://liyaodong.com/2015/02/27/%E4%BD%BF%E7%94%A8Chrome%E6%A8%A1%E6%8B%9F%E5%BE%AE%E4%BF%A1%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <id>http://liyaodong.com/2015/02/27/使用Chrome模拟微信浏览器/</id>
    <published>2015-02-27T05:30:48.000Z</published>
    <updated>2017-01-03T11:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://liyaodong.qiniudn.com/uploads/2015/02/wechat.jpg" alt="wechat"><br>小Tip大方便，虽然只是改改UA但确实方便了很多。<a id="more"></a></p>
<h3 id="为什么需要？"><a href="#为什么需要？" class="headerlink" title="为什么需要？"></a>为什么需要？</h3><p>如果你需要针对微信写一个微信分享提示，那么你得判断是否为微信浏览器并做调试。如果你还需要分别针对安卓版和ios版微信做区分，那这时候你需要这么一个小Tip。（土豪公司配真机测试的请绕道）</p>
<h3 id="怎么做？"><a href="#怎么做？" class="headerlink" title="怎么做？"></a>怎么做？</h3><p>打开Chrome（废话），审查元素-左上角的小手机（Toggle device mode）快捷键Command + Shift + M。更改UA即可。</p>
<p><img src="http://liyaodong.qiniudn.com/uploads/2015/02/9F7CF394-4C9C-450F-9850-B2649ED010D5.jpg" alt="Toggle device mode"></p>
<blockquote>
<p>`微信安卓UA<br> mozilla/5.0 (linux; u; android 4.1.2; zh-cn; mi-one plus build/jzo54k) applewebkit/534.30 (khtml, like gecko) version/4.0 mobile safari/534.30 micromessenger/5.0.1.352</p>
<p> 微信iPhone UA<br> mozilla/5.0 (iphone; cpu iphone os 5_1_1 like mac os x) applewebkit/534.46 (khtml, like gecko) mobile/9b206 micromessenger/5.0<br>`</p>
</blockquote>
<p>&nbsp;</p>
<h4 id="保存配置信息，以后直接选择"><a href="#保存配置信息，以后直接选择" class="headerlink" title="保存配置信息，以后直接选择"></a>保存配置信息，以后直接选择</h4><p><img src="http://liyaodong.qiniudn.com/uploads/2015/02/screenshort.jpg" alt="screenshort"></p>
<p>&nbsp;</p>
<h4 id="JS端检测"><a href="#JS端检测" class="headerlink" title="JS端检测"></a>JS端检测</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ua = navigator.userAgent.toLowerCase();</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="regexp">/micromessenger/</span>.test(ua)) &#123;</div><div class="line">  <span class="keyword">if</span>(<span class="regexp">/android/</span>.test(ua)) &#123;</div><div class="line">    <span class="comment">// balabala...</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(<span class="regexp">/iphone/</span>.test(ua)) &#123;</div><div class="line">    <span class="comment">// balabala...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么问题来了，如果是要模仿微信JSSDK的内容呢？，这… 其实也不是没有办法，在手机上把微信独有的API暴露出来，然后复制到电脑上balabala…  没必要，或许微信会出一个方便调试的好东西吧…</p>
<blockquote>
<p>注：头图来自 <a href="http://drbl.in/iwfJ" target="_blank" rel="external">@Hawk Jon</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://liyaodong.qiniudn.com/uploads/2015/02/wechat.jpg&quot; alt=&quot;wechat&quot;&gt;&lt;br&gt;小Tip大方便，虽然只是改改UA但确实方便了很多。
    
    </summary>
    
    
      <category term="科技改变生活" scheme="http://liyaodong.com/tags/%E7%A7%91%E6%8A%80%E6%94%B9%E5%8F%98%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>SAE版本Wordpress开启七牛云静态加速的一些坑</title>
    <link href="http://liyaodong.com/2015/02/02/SAE%E7%89%88%E6%9C%ACWordpress%E5%BC%80%E5%90%AF%E4%B8%83%E7%89%9B%E4%BA%91%E9%9D%99%E6%80%81%E5%8A%A0%E9%80%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
    <id>http://liyaodong.com/2015/02/02/SAE版本Wordpress开启七牛云静态加速的一些坑/</id>
    <published>2015-02-02T08:09:22.000Z</published>
    <updated>2017-01-03T11:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://liyaodong.qiniudn.com/uploads/2015/02/qiniu.jpg" alt="qiniu"></p>
<p>如果你也和我一样，使用了插件之后发现只有部分图片被缓存过来了那就应该看看这些坑的地方了。<a id="more"></a></p>
<h3 id="剧情摘要"><a href="#剧情摘要" class="headerlink" title="剧情摘要"></a>剧情摘要</h3><blockquote>
<p>1.Wordpress 版本：<a href="http://blog.gimhoy.com/archives/wordpress-on-sae.html" target="_blank" rel="external">wordpress 3.9 for SAE</a></p>
<p>  2.<a href="https://wyr.me/qiniu-sae-bae.html" target="_blank" rel="external">七牛云Wordpress专版插件及参考教程</a></p>
<p>  3.参考资料：<a href="http://t.cn/RZkql1t" target="_blank" rel="external">迁移博客图片资源从SAE到七牛</a></p>
</blockquote>
<h3 id="现在来说说那些坑"><a href="#现在来说说那些坑" class="headerlink" title="现在来说说那些坑"></a>现在来说说那些坑</h3><p>1.如果你也启用插件了，但是博客显示部分图片无法访问。这个时候你需要在七牛云后台找到「空间设置」-「域名设置」找到七牛自带的那个很长的域名，以本站为例就是<code>http://7o500k.com1.z0.glb.clouddn.com</code>，使用这个地址作为插件后台设置中的「七牛绑定的域名」这一项。</p>
<p>2.在七牛云后台设置镜像源的时候需要设置成你的SAE Storage的地址，本站为例：<code>http://liyaodong.qiniudn.com/</code></p>
<p>3.如果你设置了镜像源还不行，有些图片没有同步到CDN时你需要自己把SAE Storage中的文件下载下来然后再传上去，参考<a href="http://t.cn/RZkql1t" target="_blank" rel="external">迁移博客图片资源从SAE到七牛</a></p>
<p>4.SAE Storage客户端操作文档：<a href="http://sae.sina.com.cn/doc/php/storage.html" target="_blank" rel="external">http://sae.sina.com.cn/doc/php/storage.html</a></p>
<p>5.七牛云<a href="http://developer.qiniu.com/docs/v6/tools/qrsync.html" target="_blank" rel="external">qrsync工具</a></p>
<p>6.这个坑真心浪费了至少半个小时，SAE Storage文档是旧的没有更新，新版<code>AccessKey</code>在应用首页-右侧的那块不太显眼的地方。</p>
<p>7.如果你又使用Fancybox这类jQuery插件的话，最好不要启用七牛插件的使用jQuery 2.0选项</p>
<p>8.其实有时候你会发现这才是真正的坑，插件配置中自动填写的SAE Storage地址是问题的，虽然插件还是告诉你它帮你自动填好了，其实你只要在后面加上/你会发现一切问题都解决了。也就是说确保你的地址是：<code>http://liyaodong.qiniudn.com/</code>不要忘记最后的/</p>
<p>希望能给后来人点帮助，也感谢其他博主写的相关文章，世界因你们更美好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://liyaodong.qiniudn.com/uploads/2015/02/qiniu.jpg&quot; alt=&quot;qiniu&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果你也和我一样，使用了插件之后发现只有部分图片被缓存过来了那就应该看看这些坑的地方了。
    
    </summary>
    
    
      <category term="科技改变生活" scheme="http://liyaodong.com/tags/%E7%A7%91%E6%8A%80%E6%94%B9%E5%8F%98%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>使用Grunt、Github和Shell脚本来加速前端项目初始化</title>
    <link href="http://liyaodong.com/2015/02/01/%E4%BD%BF%E7%94%A8Grunt%E3%80%81Github%E5%92%8CShell%E8%84%9A%E6%9C%AC%E6%9D%A5%E5%8A%A0%E9%80%9F%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>http://liyaodong.com/2015/02/01/使用Grunt、Github和Shell脚本来加速前端项目初始化/</id>
    <published>2015-02-01T09:28:26.000Z</published>
    <updated>2017-01-03T11:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://liyaodong.qiniudn.com/uploads/2015/02/Icons-Larger.png" target="_blank" rel="external"><img src="http://liyaodong.qiniudn.com/uploads/2015/02/Icons-Larger.png" alt="Icons-Larger"></a>如果你厌烦了每次都要自己编写Grunt文件，自己编译scss|less|sass，自己打包合并什么的就可以尝试写这么一个小玩意。<a id="more"></a></p>
<h3 id="写的时候很费劲，写完了还是很爽的"><a href="#写的时候很费劲，写完了还是很爽的" class="headerlink" title="写的时候很费劲，写完了还是很爽的"></a>写的时候很费劲，写完了还是很爽的</h3><p>在<a href="https://github.com/liyaodong/mygrunt" target="_blank" rel="external">Github上建了一个仓库</a>，上面有一个<code>mygrunt.sh</code>脚本，配合Sublime Text的<a href="http://net.tutsplus.com/articles/news/introducing-nettuts-fetch/" target="_blank" rel="external">Fetch插件</a>。每次新建项目的时候只需要在Sublime下新建一个mygrunt.sh文件然后用Fetch插件把远程文件拉取下来。然后运行之，哗啦哗啦喝口茶的功夫，项目目录就配置好了。这个体验还是很爽的，虽然也有类似于<a href="http://yeoman.io/" target="_blank" rel="external">Yeoman</a>这样的工具，但个人感觉还是用不习惯，不过yeoman也有很多很爽的地方，很赞的一个工具。</p>
<h3 id="为什么要重复发明轮子？"><a href="#为什么要重复发明轮子？" class="headerlink" title="为什么要重复发明轮子？"></a>为什么要重复发明轮子？</h3><p>就是瞎折腾，为了定制，为了自己爽。如果你也打算用，最好还是看一下我写的这个<a href="https://github.com/liyaodong/mygrunt/blob/master/Gruntfile.js" target="_blank" rel="external">Gruntfile.js</a>。我知道烂的和屎一样，仅仅是保证能运行起来，看过同事用<a href="https://github.com/Niandalu/sdemo/blob/master/Gruntfile.coffee" target="_blank" rel="external">CoffeeScript写的版本</a>确实精炼很多，可是我就是不喜欢Coffee，就是喜欢喝茶。</p>
<h3 id="使用时的一些Tip-其实是坑-："><a href="#使用时的一些Tip-其实是坑-：" class="headerlink" title="使用时的一些Tip(其实是坑)："></a>使用时的一些Tip(其实是坑)：</h3><blockquote>
<p>1.首先你得装Nodejs吧</p>
<p>  2.你得是Linux/Mac系统吧，sh脚本得运行起来啊</p>
<p>  3.安装完成你必须重新配置一下<code>Gruntfile.js</code>，以确保哪个文件需要被压缩成最终文件，以及文件的顺序等</p>
<p>  4.scss文件是默认在src文件夹下都会自动压缩的，如果你需要自定义顺序就自己改改吧</p>
<p>  5.最后一条，记得配置<code>Gruntfile.js</code></p>
</blockquote>
<p>头图来自<a href="https://dribbble.com/shots/999657-Process-Icons?list=searches&amp;tag=develop&amp;offset=37" target="_blank" rel="external">Vic Bell</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://liyaodong.qiniudn.com/uploads/2015/02/Icons-Larger.png&quot;&gt;&lt;img src=&quot;http://liyaodong.qiniudn.com/uploads/2015/02/Icons-Larger.png&quot; alt=&quot;Icons-Larger&quot;&gt;&lt;/a&gt;如果你厌烦了每次都要自己编写Grunt文件，自己编译scss|less|sass，自己打包合并什么的就可以尝试写这么一个小玩意。
    
    </summary>
    
    
      <category term="科技改变生活" scheme="http://liyaodong.com/tags/%E7%A7%91%E6%8A%80%E6%94%B9%E5%8F%98%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>新的Chrome插件「URL2QR」</title>
    <link href="http://liyaodong.com/2015/01/30/%E6%96%B0%E7%9A%84Chrome%E6%8F%92%E4%BB%B6%E3%80%8CURL2QR%E3%80%8D/"/>
    <id>http://liyaodong.com/2015/01/30/新的Chrome插件「URL2QR」/</id>
    <published>2015-01-29T17:45:18.000Z</published>
    <updated>2017-01-03T11:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://liyaodong.qiniudn.com/uploads/2015/01/qrcode.jpg" target="_blank" rel="external"><img src="http://liyaodong.qiniudn.com/uploads/2015/01/qrcode.jpg" alt="qrcode"></a>当你需要把你正在看的网页分享到移动设备上时，你需要这么一个插件。<a id="more"></a></p>
<h3 id="网上的二维码在线制作难道还不够多吗？为什么还要重复发明轮子？"><a href="#网上的二维码在线制作难道还不够多吗？为什么还要重复发明轮子？" class="headerlink" title="网上的二维码在线制作难道还不够多吗？为什么还要重复发明轮子？"></a>网上的二维码在线制作难道还不够多吗？为什么还要重复发明轮子？</h3><p>事情是这样的，当你想要在移动设备上调试你正在开发的网页的时候你需要更改<code>localhost:3000/xxx</code>为<code>192.168.1.xxx:3000/xxx</code>，每次都要复制，然后修改，然后生成这绝对不是一种好的体验。这是痛点，没错，是痛点。</p>
<h3 id="既然有痛点那就去解决它！"><a href="#既然有痛点那就去解决它！" class="headerlink" title="既然有痛点那就去解决它！"></a>既然有痛点那就去解决它！</h3><p>于是我和<a href="https://github.com/niandalu" target="_blank" rel="external">@Neyo</a>同学一起做了这么一个插件，Neyo同学有深厚的功力可以做到自动检测局域网IP，而我只能做到正则替换。于是他做了一个<a href="https://github.com/Niandalu/alfred-convert-url-to-qrcode" target="_blank" rel="external">Alfred的版本</a>而我做了Chrome插件版。</p>
<p><a href="https://github.com/liyaodong/url2qr" target="_blank" rel="external">下载、试用、源码、QA</a></p>
<p>使用方法Github上都已经说明了，这里不如就聊聊TODO吧。</p>
<h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO:"></a>TODO:</h3><p>看到头图了吗？好漂亮的二维码有木有！好吧是转载自<a href="http://uiweek.com/" target="_blank" rel="external">UIweek</a>的。有时间了把二维码美化一下，不说像头图那样至少也能让人赏心悦目，毕竟是天天要看的东西。好了，今天就这样把，晚安。</p>
<p>［(－－)］zzz</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://liyaodong.qiniudn.com/uploads/2015/01/qrcode.jpg&quot;&gt;&lt;img src=&quot;http://liyaodong.qiniudn.com/uploads/2015/01/qrcode.jpg&quot; alt=&quot;qrcode&quot;&gt;&lt;/a&gt;当你需要把你正在看的网页分享到移动设备上时，你需要这么一个插件。
    
    </summary>
    
    
      <category term="设计——让生活更有爱" scheme="http://liyaodong.com/tags/%E8%AE%BE%E8%AE%A1%E2%80%94%E2%80%94%E8%AE%A9%E7%94%9F%E6%B4%BB%E6%9B%B4%E6%9C%89%E7%88%B1/"/>
    
  </entry>
  
  <entry>
    <title>关于@font-face的跨域请求问题</title>
    <link href="http://liyaodong.com/2015/01/30/%E5%85%B3%E4%BA%8E-font-face%E7%9A%84%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E9%97%AE%E9%A2%98/"/>
    <id>http://liyaodong.com/2015/01/30/关于-font-face的跨域请求问题/</id>
    <published>2015-01-29T17:16:46.000Z</published>
    <updated>2017-01-03T11:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://liyaodong.qiniudn.com/uploads/2015/01/icon.jpg" target="_blank" rel="external"><img src="http://liyaodong.qiniudn.com/uploads/2015/01/icon.jpg" alt="font-icon"></a></p>
<p>如果你网站上的图标在一个域名下正常，在另外一个域名下无法显示那你就需要看看这篇文章了。没有多少杂技，只有干货。<a id="more"></a></p>
<h3 id="为什么另外一个域名没有图标？"><a href="#为什么另外一个域名没有图标？" class="headerlink" title="为什么另外一个域名没有图标？"></a>为什么另外一个域名没有图标？</h3><p>一般情况下是因为跨域问题，打开console你可以看到这么一段话：</p>
<blockquote>
<p>Font from origin ‘<a href="http://liyaodong.sinaapp.com" target="_blank" rel="external">http://liyaodong.sinaapp.com</a>‘ has been blocked from loading by Cross-Origin Resource Sharing policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘<a href="http://liyaodong.com">http://liyaodong.com</a>‘ is therefore not allowed access.</p>
</blockquote>
<h3 id="解决办法？"><a href="#解决办法？" class="headerlink" title="解决办法？"></a>解决办法？</h3><h5 id="1-简单粗暴型"><a href="#1-简单粗暴型" class="headerlink" title="1. 简单粗暴型"></a>1. 简单粗暴型</h5><p>把字体文件放到绝对路径下，并且将要请求的页面加入到防盗链白名单。这是博主最后的做法，在折腾其他方法无果后。</p>
<h5 id="2-一劳永逸法"><a href="#2-一劳永逸法" class="headerlink" title="2.一劳永逸法"></a>2.一劳永逸法</h5><p>添加<code>Access-Control-Allow-Origin</code>  Http header 。这个具体根据你所使用的后端语言不同方法不同，如果是wordpress可以有一个现成的插件可以用。<a href="https://github.com/jacopotarantino/WordPress-Cross-Domain-Plugin" target="_blank" rel="external">WordPress-Cross-Domain-Plugin</a>  但是博主亲测即时设置了也没用，因为你的js文件请求的直接是<code>/fonts/xxx.woff|ttf</code>文件，而你看这个文件的http头是没有被插件设置上header的。</p>
<p>那么问题来了该怎么办？机智的程序员灵光一现拍案说到，为什么不用<code>.htaccess</code> ？楼主机智，说的好。</p>
<p>[code]</p>
<h1 id="Apache-config"><a href="#Apache-config" class="headerlink" title="Apache config"></a>Apache config</h1><p>&lt;FilesMatch &quot;.(eot|ttf|otf|woff)&quot;&gt;<br>Header set Access-Control-Allow-Origin &quot;*&quot;</p>
<h1 id="nginx-config"><a href="#nginx-config" class="headerlink" title="nginx config"></a>nginx config</h1><p>if ($filename ~<em> ^.</em>?.(eot)|(ttf)|(woff)$){<br>add_header Access-Control-Allow-Origin *;<br>}<br>[/code]</p>
<p><a href="http://davidwalsh.name/cdn-fonts" target="_blank" rel="external">参考链接：Cross-Domain Fonts</a></p>
<p>可我的是SAE主机，不支持自定义<code>.htaccess</code>，按照官方文档来看只支持一个叫<code>Appconfig</code>的东西，看了半天也没看出来怎么自定义这个header。所以我又拍了一下脑子，直接放到SAE的Storage里吧。然后再把css文件里的路径换成<a href="http://xxxx.com/fonts/xxx.xxx这样的路径，ok问题解决了。" target="_blank" rel="external">http://xxxx.com/fonts/xxx.xxx这样的路径，ok问题解决了。</a></p>
<p>恩，就到这里吧。好困，但是还想再来一篇。</p>
<p>注：头图来自<a href="http://drbl.in/eJos" target="_blank" rel="external">@Mike </a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://liyaodong.qiniudn.com/uploads/2015/01/icon.jpg&quot;&gt;&lt;img src=&quot;http://liyaodong.qiniudn.com/uploads/2015/01/icon.jpg&quot; alt=&quot;font-icon&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你网站上的图标在一个域名下正常，在另外一个域名下无法显示那你就需要看看这篇文章了。没有多少杂技，只有干货。
    
    </summary>
    
    
      <category term="科技改变生活" scheme="http://liyaodong.com/tags/%E7%A7%91%E6%8A%80%E6%94%B9%E5%8F%98%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>「转译」阅读jQuery源码收获的18个惊喜</title>
    <link href="http://liyaodong.com/2015/01/11/%E3%80%8C%E8%BD%AC%E8%AF%91%E3%80%8D%E9%98%85%E8%AF%BBjQuery%E6%BA%90%E7%A0%81%E6%94%B6%E8%8E%B7%E7%9A%8418%E4%B8%AA%E6%83%8A%E5%96%9C/"/>
    <id>http://liyaodong.com/2015/01/11/「转译」阅读jQuery源码收获的18个惊喜/</id>
    <published>2015-01-10T16:34:58.000Z</published>
    <updated>2017-01-03T11:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://liyaodong.qiniudn.com/uploads/2015/01/jquery.jpg" target="_blank" rel="external"><img src="http://liyaodong.qiniudn.com/uploads/2015/01/jquery.jpg" alt="jquery-logo"></a></p>
<p>我爱死jQuery了，所以我就看了jQuery的源码。所以就有了这篇译文。来和我一起收获这些惊喜吧！（该句为译者注(≧∇≦)（这么不严谨只要闹哪样））</p>
<a id="more"></a>我非常喜欢jQuery，但是尽管我认为自己是一个高级Javascript开发者，但在这之前我从来没有从头到尾地阅读过jQuery的源码。下面就是我从这次阅读过程中学到的一些东西啦！(^<em>^)ノ<br><br><a href="http://quickleft.com/blog/18-surprises-from-reading-jquery-s-source-code" target="_blank" rel="external">原文链接</a><br><br>注：我使用<code>$.fn.method()</code>的语法来代表jQuery在实际中对元素所操作的方法。例如当我说<code>$.fn.addClass</code>相当于<code>$(&#39;div&#39;).addClass(&#39;blue&#39;)</code>或<code>$(&#39;a.active&#39;).addClass(&#39;in-use&#39;)</code>。<code>$.fn</code>代指jQuery所包裹的元素。<br><br>### 1. sizzle的体积<br><br><a href="http://sizzlejs.com/" target="_blank" rel="external">sizzle</a>是jQuery基于CSS选择器的选择器引擎。这就是为啥<code>$(&#39;div.active&#39;)</code>可以操作一组元素。我知道sizzle占了jQuery的很大一部分体积。但我真没想到这玩意占了这么大。选择器无疑是jQuery最大的特性，在jQuery源码中只有一行。但是根据我的的计算它的体积占了整个jQuery的22%。jQuery中的第二大特性<code>$.ajax</code>的体积才占了8%。<br><br>### 2. $.grep<br><br><a href="http://api.jquery.com/jquery.grep/" target="_blank" rel="external">$.grep</a>很像<a href="http://underscorejs.org/" target="_blank" rel="external">underscore</a>中的`</em>.filter<code>。它接受两个参数，一个包含被操作元素的数组和一个函数。</code>$.grep<code>的返回值是通过函数后为</code>true<code>的值。

译者注：underscore也是一种十分方便的javascript框架

### 3\. **Bubbling caveats**（冒泡警告）

jQuery专门禁止了</code>load<code>类型的冒泡事件，通过</code>noBuddle: true<code>来标记任何</code>load<code>事件。所以图片加载完成的事件就没法冒泡到</code>window<code>这一层。（这会错误的触发window.onload事件）

译者注：冒泡时间指在DOM中事件会从点击的DOM向上级开始直到window对象进行事件传递

### 4\. 默认的动画速度

jQuery通过快速的改变元素的样式来做成动画，每次属性的改变都称之为一个『小瞬间』，默认的动画速度是每13毫秒进行一个『小瞬间』。你可以通过给</code>jQuery.fx.interval<code>来设置一个整数以设置『小瞬间』的间隔。

### 5\. $.fn.addClass接受函数类型的参数

我们通常给</code>$.fn.addClass<code>传递一个字符型类名以给某个元素增加样式类(.class)。你或许不知道它同样接受函数型的参数，但是你必须返回一个以空格分开的类名以应用到所选择的元素上。小技巧：</code>$.fn.addClass<code>所选择的元素会作为参数传递到你所自定义的函数里。也就是说你可以通过这个特性构建更机智的类名。

### 6\. 那么$.fn.removeClass呢？

机智的你应该能想到这个函数也能向上条一样接受一个函数型式的参数，同样它也会自动接受所选元素的下标(index)。

### 7\. :empty伪类

这个伪类可以很方便的选择没有子元素的DOM。

### 8\. :lt和:gt伪类

这俩伪类会过滤已选择的元素，比如</code>$(‘div:gt(2)’)<code>会返回除过前三个元素的剩下元素（2代表3因为是从0开始0,1,2）。如果你提供了一个负整数作为参数那么就会从最后向前匹配。

译者注：如果你传入-5就会选择最后4个，亲测。

### 9\. $(document).ready()使用了promise

jQuery吃自己的狗粮（用自己提供的方法），我们会看到</code>$(document).ready<code>会检查所有DOM加载完毕后再继续执行。

译者注：promise是javascript中的一种异步队列机制，比较复杂，具体大家可以自行Google

### 10\. $.type

我敢保证我们都通过</code>typeof<code>来检测一个变量/常量的类型，但是你知道jQuery提供了一个</code>.type()<code>方法么？jQuery提供的比浏览器自带的更加聪明。例如</code>typeof (new Number(3))<code>会返回一个</code>object<code>，然而</code>$.type(new Number(3))<code>会返回一个</code>number<code>。原作者注：</code>$.type<code>在针对一个</code>object<code>来检测是会通过</code>.valueOf<code>来返回值。这样就可以检测一个对象真正的数据类型了。

### 11\. $.fn.queue

你可以通过</code>$(‘div’).queue()`来审查某个元素的效果，如果你想要知道某个元素上还剩下多少动画效果这将会很有用。更有用的是你可以直接操作队列来加入你自己的效果。<br><br>来自jQuery的手册：<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$( <span class="built_in">document</span>.body ).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">$( &amp;quot;div&amp;quot; )</div><div class="line">.show( &amp;quot;slow&amp;quot; )</div><div class="line">.animate(&#123; <span class="attr">left</span>: &amp;quot;+=<span class="number">200</span>&amp;quot; &#125;, <span class="number">2000</span> )</div><div class="line">.queue(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">$( <span class="keyword">this</span> ).addClass( &amp;quot;newcolor&amp;quot; ).dequeue();</div><div class="line">&#125;)</div><div class="line">.animate(&#123; <span class="attr">left</span>: &amp;quot;-=<span class="number">200</span>&amp;quot; &#125;, <span class="number">500</span> )</div><div class="line">.queue(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">$( <span class="keyword">this</span> ).removeClass( &amp;quot;newcolor&amp;quot; ).dequeue();</div><div class="line">&#125;)</div><div class="line">.slideUp();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="12-属性为disable的元素是禁止Click事件的"><a href="#12-属性为disable的元素是禁止Click事件的" class="headerlink" title="12. 属性为disable的元素是禁止Click事件的"></a>12. 属性为disable的元素是禁止Click事件的</h3><p>jQuery自动不处理属性为disable的元素，一个非常好的优化帮助你检查你自己的代码逻辑。</p>
<h3 id="13-fn-on-接受一个object"><a href="#13-fn-on-接受一个object" class="headerlink" title="13. $.fn.on 接受一个object"></a>13. $.fn.on 接受一个object</h3><p>你知道<code>$.fn.on</code>可以让一个对象一次性检测多个事件吗？</p>
<p>jQuery手册中的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$( &amp;quot;div.test&amp;quot; ).on(&#123;</div><div class="line"><span class="attr">click</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $( <span class="keyword">this</span> ).toggleClass( &amp;quot;active&amp;quot; );</div><div class="line">&#125;, <span class="attr">mouseenter</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $( <span class="keyword">this</span> ).addClass( &amp;quot;inside&amp;quot; );</div><div class="line">&#125;, <span class="attr">mouseleave</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $( <span class="keyword">this</span> ).removeClass( &amp;quot;inside&amp;quot; );</div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="14-camelCase"><a href="#14-camelCase" class="headerlink" title="14. $.camelCase"></a>14. $.camelCase</h3><p>这个实用的工具会帮你把中划线命名的字符串转化为骆驼峰命名法的字符。</p>
<p>译者注：<code>$.camelCase(&#39;some-variable&#39;);</code>会输出<code>someVariable</code></p>
<h3 id="15-active"><a href="#15-active" class="headerlink" title="15. $.active"></a>15. $.active</h3><p>调用<code>$.active</code>会返回当前正在进行的<code>XHR</code>查询，这可以用于你想要限制<code>XHR</code>请求数量的时候。</p>
<p>译者注：<code>XHR</code>即<code>XMLHttpRequest</code>，详情可以看<a href="https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest" target="_blank" rel="external">MDN的文档</a></p>
<h3 id="16-fn-parentsUntil-fn-nextUntil-fn-prevUntil"><a href="#16-fn-parentsUntil-fn-nextUntil-fn-prevUntil" class="headerlink" title="16. $.fn.parentsUntil / $.fn.nextUntil / $.fn.prevUntil"></a>16. <strong>$.fn.parentsUntil / $.fn.nextUntil / $.fn.prevUntil</strong></h3><p>他们非常像<code>.parents()</code> <code>next()</code>和<code>.prev()</code>方法，但是我并不知道他们存在另一个版本。事实上这些方法会选择你所要选择的所有元素直到触发终止条件。</p>
<h3 id="17-fn-clone的参数"><a href="#17-fn-clone的参数" class="headerlink" title="17. $.fn.clone的参数"></a>17. $.fn.clone的参数</h3><p>当你使用<code>.clone()</code>来复制一个元素的时候，你可以通过设置第一个参数为<code>true</code>来复制该元素的<code>data</code>属性以及事件。</p>
<p>译者注：根据最近的项目总结来看，clone是做js动态插入DOM最好的工具了，HTML中写入模板并插入hidden类，js里复制并去掉hidden类，起到了html模板的作用。比以前直接在js里生成DOM爽很多。</p>
<h3 id="18-fn-clone的其他参数"><a href="#18-fn-clone的其他参数" class="headerlink" title="18. $.fn.clone的其他参数"></a>18. $.fn.clone的其他参数</h3><p>除上述之外，你可以通过增加<code>true</code>参数来复制一个元素的<code>data</code>属性和事件，这叫做『深度复制。该函数的第二个参数默认会和第一个一样（参数默认值为：<code>false</code>）也就是说如果你想传两个参数都为<code>true</code>你可以只穿第一个不传第二个参数。因为第二个参数默认会和第一个参数一样。</p>
<p>译者注：这段话真拗口，扔个<a href="http://api.jquery.com/clone/" target="_blank" rel="external">jQuery手册</a>相信大家一看就懂。</p>
<p>译者发言：这是第一次翻译文章，相信有很多的槽点。但是没关系，真正的程序员是会直接看英文的，所以这篇文章的目的更多的是锻炼自己的英文能力，其次也刚好通过翻译熟悉了技术。真是一举两得，以后会多多翻译优秀文章的，当然会一次比一次好。</p>
<p>以为最多一个小时就能搞定的，没想到将近三个小时才搞定，看来程序员对工作的估时真不可靠啊！晚安，Good Night !</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://liyaodong.qiniudn.com/uploads/2015/01/jquery.jpg&quot;&gt;&lt;img src=&quot;http://liyaodong.qiniudn.com/uploads/2015/01/jquery.jpg&quot; alt=&quot;jquery-logo&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我爱死jQuery了，所以我就看了jQuery的源码。所以就有了这篇译文。来和我一起收获这些惊喜吧！（该句为译者注(≧∇≦)（这么不严谨只要闹哪样））&lt;/p&gt;
    
    </summary>
    
    
      <category term="科技改变生活" scheme="http://liyaodong.com/tags/%E7%A7%91%E6%8A%80%E6%94%B9%E5%8F%98%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>像黑客一样使用Chrome</title>
    <link href="http://liyaodong.com/2015/01/10/%E5%83%8F%E9%BB%91%E5%AE%A2%E4%B8%80%E6%A0%B7%E4%BD%BF%E7%94%A8Chrome/"/>
    <id>http://liyaodong.com/2015/01/10/像黑客一样使用Chrome/</id>
    <published>2015-01-10T04:49:45.000Z</published>
    <updated>2017-01-03T11:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://liyaodong.qiniudn.com/uploads/2015/01/未标题-2.jpg" target="_blank" rel="external"><img src="http://liyaodong.qiniudn.com/uploads/2015/01/未标题-2.jpg" alt="hacker"></a></p>
<p>如果你不知道Chrome是什么还是别看这篇文章了，虽然标题有点水（这是有点吗 ¬_¬）。本文是讲述如何使用VIM的操作习惯来操作Chrome的。<a id="more"></a></p>
<p>话说VIM党们习惯了使用<code>j</code> <code>k</code>来上下左右是否对网页需要用到鼠标很不爽？当然资深的VIM党应该已经用过很多个浏览器VIM插件了。所以这篇文章主要还是给像我这样的小白讲的。</p>
<h3 id="如何更快的操作你的Chrome"><a href="#如何更快的操作你的Chrome" class="headerlink" title="如何更快的操作你的Chrome"></a>如何更快的操作你的Chrome</h3><p>就是<a href="http://t.cn/R7fQUYV" target="_blank" rel="external">cVim</a>，一个Chrome插件。装上这个插件之后浏览网页基本就可以脱离鼠标了。如果能配上<code>Trackpad</code>，啧啧，那个爽啊。既然给像我这样的小白用户写的文章那当然要<del>面面俱到</del>啦。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>chrome插件向来都是直接点进去链接然后安装的，有什么好说的。戳链接就是了<a href="http://t.cn/R7fQUYV" target="_blank" rel="external">cVim安装链接</a></p>
<p>可这是小白，小白点进去可能会是网页无法访问。如果你点进去是无法访问那就是说，你是和我一样的小白。哈哈，不绕圈子了。因为Google被墙的原因，很多时候Chrome插件商店不翻墙是没法访问的。翻墙作为一项科学上网必备技能，最好还是学学，当然这是另一个话题了。</p>
<p><a href="http://pan.baidu.com/s/1c0EkREo" target="_blank" rel="external">cVim百度网盘下载</a></p>
<p>如果是在百度网盘下载会下载个一个crx文件，那么这时候你需要用你的Chrome浏览器打开这个地址<code>chrome://extensions/</code>然后把下载好的crx文件拖到这个页面就安装成功了。</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>最基本的使用就是<code>j</code> <code>k</code> <code>d</code> <code>u</code>分别是滚屏一小段，滚屏一半，代替了你以前按上下键。另外操作几率非常高的就是<code>F</code>，是大写的<code>F</code>然后你的页面上就会有很多的字母，这代表了链接。输入你想打开的链接上的字母就可以打开了。这是最基本的用法。建议你看一下官方大而全的操作说明。</p>
<p><a href="https://github.com/1995eaton/chromium-vim/" target="_blank" rel="external">cVim官方Github地址</a></p>
<h4 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h4><p>作为一名具有基本审美的前端，当然要写写样式美化一下丑陋的<code>F</code>了。分享给大家<a href="https://gist.github.com/liyaodong/aa0cd9495582925e1ab2" target="_blank" rel="external">我的cVim CSS配置</a>，需要的戳就是了。</p>
<h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h4><p>进阶使用就是自己去配置属于自己的<code>cVim</code>，比如你想要在某个网页禁用该插件可以在配置里写上<code>let blacklists = [&quot;http://lh/*&quot;]</code>具体的语法文档也可以在<a href="https://github.com/1995eaton/chromium-vim/" target="_blank" rel="external">官方Github</a>里看到。作为同是小白的用户的我就不误导大家啦！</p>
<p>最后祝大家周末愉快 (♥◠‿◠)ﾉ</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://liyaodong.qiniudn.com/uploads/2015/01/未标题-2.jpg&quot;&gt;&lt;img src=&quot;http://liyaodong.qiniudn.com/uploads/2015/01/未标题-2.jpg&quot; alt=&quot;hacker&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你不知道Chrome是什么还是别看这篇文章了，虽然标题有点水（这是有点吗 ¬_¬）。本文是讲述如何使用VIM的操作习惯来操作Chrome的。
    
    </summary>
    
    
      <category term="科技改变生活" scheme="http://liyaodong.com/tags/%E7%A7%91%E6%8A%80%E6%94%B9%E5%8F%98%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Five Dictionary tricks I can&#39;t live without</title>
    <link href="http://liyaodong.com/2014/11/21/Five-Dictionary-tricks-I-can-t-live-without/"/>
    <id>http://liyaodong.com/2014/11/21/Five-Dictionary-tricks-I-can-t-live-without/</id>
    <published>2014-11-21T15:56:26.000Z</published>
    <updated>2017-01-03T11:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://liyaodong.qiniudn.com/uploads/2014/11/dictionary_gallery-100037014-gallery.jpg" target="_blank" rel="external"><img src="http://liyaodong.qiniudn.com/uploads/2014/11/dictionary_gallery-100037014-gallery.jpg" alt="dictionary"></a></p>
<p>You’ve probably ditched your paper dictionary, but do you know how to use OS X’s built-in one? This week’s video shows you how.</p>
<a id="more"></a>
<h2 id="Transcript"><a href="#Transcript" class="headerlink" title="Transcript"></a>Transcript</h2><p>Whether you need to know what a word means or just how to spell it, the days of leafing through hefty paper dictionaries are gone. But few Mac users really know how to make the most of OS X’s built-in Dictionary app. Today I’ll show you five tricks for doing just that.</p>
<h2 id="1-Use-pop-up-definitions"><a href="#1-Use-pop-up-definitions" class="headerlink" title="1. Use pop-up definitions"></a>1. Use pop-up definitions</h2><p>A useful, and chronically underused, OS X feature is systemwide pop-up definitions. In most Mac applications—including Safari, Mail, Pages, TextEdit, Twitter, you name it—just position your cursor over the word you want to define and press Command-Control-D. A pop-up window appears containing the definition, synonyms, and any relevant Wikipedia entry.</p>
<p>Click the header for <em>Dictionary</em>, <em>Thesaurus</em>, <em>Apple</em>, or <em>Wikipedia</em> to open Dictionary to the relevant page.</p>
<h2 id="2-Use-contextual-menus"><a href="#2-Use-contextual-menus" class="headerlink" title="2. Use contextual menus"></a>2. Use contextual menus</h2><p>Say you’ve forgotten the Command-Control-D shortcut already. Are you out of luck? Of course not. In most applications, you can instead select a word and Control-click (or right-click). A contextual menu appears. Select <em>Look Up in Dictionary</em> (or <em>Look Up</em>) and the definition appears.</p>
<h2 id="3-Use-Spotlight"><a href="#3-Use-Spotlight" class="headerlink" title="3. Use Spotlight"></a>3. Use Spotlight</h2><p>Another quick way to look up a word is by using the Spotlight search menu. Press Command-spacebar to activate it, and then type in the word you need defined. One of your results will be ‘Look Up’ next to the Dictionary icon. You don’t have to select this and press Return. Instead, simply hover your cursor over the entry and a pop-up menu will appear with the full definition. If you don’t want to reach for your mouse, press Command-L to jump immediately to the definition.</p>
<p>For more options—like the ability to look for synonyms—select the _Dictionary_entry (or press Command-D), and the Dictionary application will open to your word.</p>
<h2 id="4-Make-Dictionary-talk"><a href="#4-Make-Dictionary-talk" class="headerlink" title="4. Make Dictionary talk"></a>4. Make Dictionary talk</h2><p>Perhaps your elementary school teachers taught you how to decipher the pronunciation symbols provided by the dictionary, but…perhaps not. Did you know that you can get Dictionary to pronounce words for you?</p>
<p>Go to System Preferences, click <em>Dictation &amp; Speech</em>, click the _Text to Speech_tab, and choose a voice.</p>
<p>To make Dictionary talk, select a word and Control-click (or right-click) it. From the contextual menu, choose <em>Speech &gt; Start Speaking</em>.</p>
<p>If the word isn’t split into syllables (say, down below in its Thesaurus entry), you don’t even have to select it. Just point to it with your cursor and Control-click.</p>
<h2 id="5-Change-your-sources"><a href="#5-Change-your-sources" class="headerlink" title="5. Change your sources"></a>5. Change your sources</h2><p>Dictionary comes with a bunch of built-in reference sources. Select <em>Dictionary &gt; Preferences</em> to see the list. Here you can determine which sources will show up when you search and what order they’ll show up in. So, for instance, you could get rid of Wikipedia, add a Spanish language dictionary, or switch out the American English dictionary for a British English one.</p>
<p>Note that you have to be connected to the Internet to access Wikipedia. And what’s the Apple dictionary, you may ask? It includes a glossary of Apple terms—helpful for those times when you’re not interested in the type of apple you can eat.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://liyaodong.qiniudn.com/uploads/2014/11/dictionary_gallery-100037014-gallery.jpg&quot;&gt;&lt;img src=&quot;http://liyaodong.qiniudn.com/uploads/2014/11/dictionary_gallery-100037014-gallery.jpg&quot; alt=&quot;dictionary&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You’ve probably ditched your paper dictionary, but do you know how to use OS X’s built-in one? This week’s video shows you how.&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计——让生活更有爱" scheme="http://liyaodong.com/tags/%E8%AE%BE%E8%AE%A1%E2%80%94%E2%80%94%E8%AE%A9%E7%94%9F%E6%B4%BB%E6%9B%B4%E6%9C%89%E7%88%B1/"/>
    
  </entry>
  
  <entry>
    <title>Airbnb公司的Javascript风格指南</title>
    <link href="http://liyaodong.com/2014/11/17/Airbnb%E5%85%AC%E5%8F%B8%E7%9A%84Javascript%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/"/>
    <id>http://liyaodong.com/2014/11/17/Airbnb公司的Javascript风格指南/</id>
    <published>2014-11-17T15:37:11.000Z</published>
    <updated>2017-01-03T11:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://liyaodong.qiniudn.com/uploads/2014/11/airbnb.jpg" target="_blank" rel="external"><img src="http://liyaodong.qiniudn.com/uploads/2014/11/airbnb.jpg" alt="airbnb-javascript-style-guide"></a></p>
<p>看过很多的前端风格指南，不是太罗嗦就是太死板，这个风格指南句句干货，值得推荐。<a id="more"></a></p>
<p>英文原版：<a href="https://github.com/airbnb/javascript" title="Airbnb javascript style guide" target="_blank" rel="external">https://github.com/airbnb/javascript</a></p>
<p>中文翻译版：<a href="https://github.com/adamlu/javascript-style-guide" title="airbnb javascript style guide" target="_blank" rel="external">https://github.com/adamlu/javascript-style-guide</a></p>
<p>建议用心仔细的看完这篇风格指南，当然大神扫两眼就行。像我这种基础不扎实的就应该仔细看，看完收获还是很多的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://liyaodong.qiniudn.com/uploads/2014/11/airbnb.jpg&quot;&gt;&lt;img src=&quot;http://liyaodong.qiniudn.com/uploads/2014/11/airbnb.jpg&quot; alt=&quot;airbnb-javascript-style-guide&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;看过很多的前端风格指南，不是太罗嗦就是太死板，这个风格指南句句干货，值得推荐。
    
    </summary>
    
    
      <category term="科技改变生活" scheme="http://liyaodong.com/tags/%E7%A7%91%E6%8A%80%E6%94%B9%E5%8F%98%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Vim快键键备忘录</title>
    <link href="http://liyaodong.com/2014/10/30/Vim%E5%BF%AB%E9%94%AE%E9%94%AE%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>http://liyaodong.com/2014/10/30/Vim快键键备忘录/</id>
    <published>2014-10-30T15:39:46.000Z</published>
    <updated>2017-01-03T11:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://liyaodong.qiniudn.com/vimbanner.jpg" alt=""><br>不支持Vim快键键的编辑器不是好记事本…目测一大波Emacs人士正在狂奔而来。。。<a id="more"></a></p>
<p>虽说没必要太过于纠结某个IDE或者编辑器，但是配置一个舒心应手的编辑器还是十分有必要的。用了两天Vim模式，感觉似乎开始慢慢接受了。网上各种快捷键的文章，但是为了保证不入坑还是放上一篇觉得不错的备忘吧。</p>
<p>注：（摘自《鸟哥的Linux私房菜》）</p>
<h3 id="vim的三种模式："><a href="#vim的三种模式：" class="headerlink" title="vim的三种模式："></a>vim的三种模式：</h3><p>一般模式 —i|o（新增一行）|a（插入）|R（替换）—&gt; 编辑模式 —ESC—&gt; 一般模式</p>
<p>一般模式 —:|/|?—&gt; 命令行模式 —ESC—&gt; 一般模式</p>
<h3 id="常用快捷键-一般模式"><a href="#常用快捷键-一般模式" class="headerlink" title="常用快捷键 * 一般模式"></a>常用快捷键 * 一般模式</h3><table>
<thead>
<tr>
<th style="text-align:center">按键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">h或←</td>
<td>光标左移一个字符。如果是30h，表示左移30个字符，下同</td>
</tr>
<tr>
<td style="text-align:center">j或↓</td>
<td>光标下移一个字符</td>
</tr>
<tr>
<td style="text-align:center">k或↑</td>
<td>光标上移一个字符</td>
</tr>
<tr>
<td style="text-align:center">l或→</td>
<td>光标右移一个字符</td>
</tr>
<tr>
<td style="text-align:center">[Ctrl]+[f]</td>
<td>屏幕向下移动一页</td>
</tr>
<tr>
<td style="text-align:center">[Ctrl]+[b]</td>
<td>屏幕向上移动一页</td>
</tr>
<tr>
<td style="text-align:center">0或[Home]</td>
<td>移动到此行最前面字符处</td>
</tr>
<tr>
<td style="text-align:center">H</td>
<td>光标移到当前屏幕最上方行的第一个字符</td>
</tr>
<tr>
<td style="text-align:center">M</td>
<td>光标移到当前屏幕最中间行的第一个字符</td>
</tr>
<tr>
<td style="text-align:center">L</td>
<td>光标移到当前屏幕最下方行第一个字符</td>
</tr>
<tr>
<td style="text-align:center">G</td>
<td>到此文件最后一行</td>
</tr>
<tr>
<td style="text-align:center">nG</td>
<td>移动到第n行</td>
</tr>
<tr>
<td style="text-align:center">gg</td>
<td>相当于1G，即到行首</td>
</tr>
<tr>
<td style="text-align:center">n[Enter]</td>
<td>光标下移n行</td>
</tr>
<tr>
<td style="text-align:center">/word</td>
<td>向下查找单词“word”</td>
</tr>
<tr>
<td style="text-align:center">?word</td>
<td>向上查找单词“word”</td>
</tr>
<tr>
<td style="text-align:center">n</td>
<td>英文按键，表示重复前一个查找操作</td>
</tr>
<tr>
<td style="text-align:center">N</td>
<td>与n相反</td>
</tr>
<tr>
<td style="text-align:center">:s/word1/word2/g</td>
<td>在当前行查找word1替换成word2</td>
</tr>
<tr>
<td style="text-align:center">:%s/word1/word2/g</td>
<td>在当前文件查找word1替换成word2</td>
</tr>
<tr>
<td style="text-align:center">:n1,n2s/word1/word2/g</td>
<td>在n1到n2行查找word1替换成word2</td>
</tr>
<tr>
<td style="text-align:center">:1,$s/word1/word2/g</td>
<td>在1到最后一行查找word1替换成word2</td>
</tr>
<tr>
<td style="text-align:center">:1,$s/word1/word2/gc</td>
<td>同上，在替换前confirm用户是否替换</td>
</tr>
<tr>
<td style="text-align:center">x</td>
<td>向后删除一个字符</td>
</tr>
<tr>
<td style="text-align:center">nx</td>
<td>向后删除n个字符</td>
</tr>
<tr>
<td style="text-align:center">X</td>
<td>向前删除一个字符</td>
</tr>
<tr>
<td style="text-align:center">dd</td>
<td>删除光标所在行</td>
</tr>
<tr>
<td style="text-align:center">ndd</td>
<td>删除光标所在行以下n行</td>
</tr>
<tr>
<td style="text-align:center">d1G</td>
<td>删除光标所在行到第一行所有数据</td>
</tr>
<tr>
<td style="text-align:center">dG</td>
<td>删除光标所在行到最后一行所有数据</td>
</tr>
<tr>
<td style="text-align:center">d$</td>
<td>删除光标所在处到同行最后一个字符</td>
</tr>
<tr>
<td style="text-align:center">d0</td>
<td>删除光标所在处到同行第一个字符</td>
</tr>
<tr>
<td style="text-align:center">yy</td>
<td>复制光标所在行</td>
</tr>
<tr>
<td style="text-align:center">nyy</td>
<td>复制光标所在向下n行</td>
</tr>
<tr>
<td style="text-align:center">y1G</td>
<td>复制光标所在行到第一行所有数据</td>
</tr>
<tr>
<td style="text-align:center">yG</td>
<td>复制光标所在行到最后一行所有数据</td>
</tr>
<tr>
<td style="text-align:center">y$</td>
<td>复制光标所在处到同行最后一个字符</td>
</tr>
<tr>
<td style="text-align:center">y0</td>
<td>复制光标所在处到同行第一个字符</td>
</tr>
<tr>
<td style="text-align:center">p</td>
<td>将已复制的数据粘贴到光标所在下一行</td>
</tr>
<tr>
<td style="text-align:center">P</td>
<td>同上，粘贴到上一行</td>
</tr>
<tr>
<td style="text-align:center">u</td>
<td>复原前一个操作</td>
</tr>
<tr>
<td style="text-align:center">[Ctrl]+r</td>
<td>重做上一个操作</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td>重复前一个操作</td>
</tr>
</tbody>
</table>
<ul>
<li>切换到编辑模式</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">按键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">i</td>
<td>从光标所在处插入</td>
</tr>
<tr>
<td style="text-align:center">l</td>
<td>在所在行第一个非空白字符处插入</td>
</tr>
<tr>
<td style="text-align:center">a</td>
<td>从光标所在下一个字符处插入</td>
</tr>
<tr>
<td style="text-align:center">A</td>
<td>从光标所在行最后一个字符处插入</td>
</tr>
<tr>
<td style="text-align:center">o</td>
<td>在光标所在处下一行插入新的一行</td>
</tr>
<tr>
<td style="text-align:center">O</td>
<td>在光标所在处上一行插入新的一行</td>
</tr>
<tr>
<td style="text-align:center">r</td>
<td>替换光标所在处字符一次</td>
</tr>
<tr>
<td style="text-align:center">R</td>
<td>一直替换光标所在处文字知道Esc</td>
</tr>
</tbody>
</table>
<ul>
<li>切换到命令行模式</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">按键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">:w[filename]</td>
<td>另存为filename</td>
</tr>
<tr>
<td style="text-align:center">:r[filename]</td>
<td>读取filename到光标所在行后面</td>
</tr>
<tr>
<td style="text-align:center">:n1,n2 w[filename]</td>
<td>将n1到n2行另存为filename</td>
</tr>
<tr>
<td style="text-align:center">:! command</td>
<td>临时切换到命令行模式下执行command，如：:! ls /tmp</td>
</tr>
<tr>
<td style="text-align:center">:set nu</td>
<td>显示行号</td>
</tr>
<tr>
<td style="text-align:center">:set nonu</td>
<td>取消显示行号</td>
</tr>
</tbody>
</table>
<h4 id="块选择"><a href="#块选择" class="headerlink" title="块选择"></a>块选择</h4><table>
<thead>
<tr>
<th style="text-align:center">按键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">V</td>
<td>开始块选择，光标移过的行将会被选择</td>
</tr>
<tr>
<td style="text-align:center">[Ctrl]+v</td>
<td>块选择，开始选择矩形区域</td>
</tr>
<tr>
<td style="text-align:center">y</td>
<td>将所选区域复制</td>
</tr>
<tr>
<td style="text-align:center">d</td>
<td>将所选区域删除</td>
</tr>
</tbody>
</table>
<h3 id="多文件编辑-使用vim-file1-file2开始多文件编辑"><a href="#多文件编辑-使用vim-file1-file2开始多文件编辑" class="headerlink" title="多文件编辑 使用vim file1 file2开始多文件编辑"></a>多文件编辑 使用<code>vim file1 file2</code>开始多文件编辑</h3><table>
<thead>
<tr>
<th style="text-align:center">按键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">:n</td>
<td>编辑下一个文件</td>
</tr>
<tr>
<td style="text-align:center">:N</td>
<td>编辑上一个文件</td>
</tr>
<tr>
<td style="text-align:center">:files</td>
<td>列出打开的所有文件</td>
</tr>
</tbody>
</table>
<h3 id="多窗口-在命令行模式输入-sp-filename-即可打开多个窗口，输入filename则会打开另一个文件，否则只是切割当前文件。"><a href="#多窗口-在命令行模式输入-sp-filename-即可打开多个窗口，输入filename则会打开另一个文件，否则只是切割当前文件。" class="headerlink" title="多窗口 在命令行模式输入:sp[filename]即可打开多个窗口，输入filename则会打开另一个文件，否则只是切割当前文件。"></a>多窗口 在命令行模式输入<code>:sp[filename]</code>即可打开多个窗口，输入filename则会打开另一个文件，否则只是切割当前文件。</h3><table>
<thead>
<tr>
<th style="text-align:center">按键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">[ctrl]+w+j或[ctrl]+w+↓</td>
<td>光标移到下方窗口</td>
</tr>
<tr>
<td style="text-align:center">[ctrl]+w+k或[ctrl]+w+↑</td>
<td>光标移到上方窗口</td>
</tr>
<tr>
<td style="text-align:center">[ctrl]+w+q</td>
<td>上下切换窗口</td>
</tr>
</tbody>
</table>
<p>注：这里所有的组合键都是先按住ctrl再按w然后再按下最后一个。</p>
<h3 id="vim设置"><a href="#vim设置" class="headerlink" title="vim设置"></a>vim设置</h3><p>配置文件：<code>vim ~/.vimrc</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://liyaodong.qiniudn.com/vimbanner.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;不支持Vim快键键的编辑器不是好记事本…目测一大波Emacs人士正在狂奔而来。。。
    
    </summary>
    
    
      <category term="科技改变生活" scheme="http://liyaodong.com/tags/%E7%A7%91%E6%8A%80%E6%94%B9%E5%8F%98%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
